[{"C:\\Users\\Admin\\Desktop\\WebService\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\WebService\\src\\reportWebVitals.js":"2","C:\\Users\\Admin\\Desktop\\WebService\\src\\App.js":"3","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\excercise1.js":"4","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\excercise3.js":"5","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\excercise2.js":"6","C:\\Users\\Admin\\Desktop\\WebService\\src\\layouts\\index.js":"7","C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\store.js":"8","C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\actions\\questions.action.js":"9","C:\\Users\\Admin\\Desktop\\WebService\\src\\layouts\\header.js":"10","C:\\Users\\Admin\\Desktop\\WebService\\src\\layouts\\sidemenu.js":"11","C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\reducers\\index.js":"12","C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\actions\\types.js":"13","C:\\Users\\Admin\\Desktop\\WebService\\src\\config.js":"14","C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\reducers\\assessment.reducer.js":"15","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\Authentication\\Login.js":"16","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\musicPlayer.js":"17","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\notePad.js":"18","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\dashBoard.js":"19","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\imageConponent.js":"20","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\galleryComponent.js":"21","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\Chat.js":"22","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\MessagePanel.js":"23","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\Message.js":"24","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\channelList.js":"25","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\channel.js":"26","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\reminders.js":"27"},{"size":519,"mtime":1618508328221,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1616577277257,"results":"30","hashOfConfig":"29"},{"size":1557,"mtime":1618931753711,"results":"31","hashOfConfig":"29"},{"size":27006,"mtime":1616577277266,"results":"32","hashOfConfig":"29"},{"size":19568,"mtime":1616577277268,"results":"33","hashOfConfig":"29"},{"size":22812,"mtime":1616577277266,"results":"34","hashOfConfig":"29"},{"size":324,"mtime":1616577277255,"results":"35","hashOfConfig":"29"},{"size":273,"mtime":1618919440042,"results":"36","hashOfConfig":"29"},{"size":1746,"mtime":1618566202672,"results":"37","hashOfConfig":"29"},{"size":1176,"mtime":1618569227387,"results":"38","hashOfConfig":"29"},{"size":2311,"mtime":1617598038995,"results":"39","hashOfConfig":"29"},{"size":174,"mtime":1616577277261,"results":"40","hashOfConfig":"29"},{"size":392,"mtime":1616577277259,"results":"41","hashOfConfig":"29"},{"size":115,"mtime":1617608004818,"results":"42","hashOfConfig":"29"},{"size":426,"mtime":1616577277259,"results":"43","hashOfConfig":"29"},{"size":4118,"mtime":1618931864048,"results":"44","hashOfConfig":"29"},{"size":7880,"mtime":1618934707349,"results":"45","hashOfConfig":"29"},{"size":6778,"mtime":1618934461142,"results":"46","hashOfConfig":"29"},{"size":4594,"mtime":1618937184334,"results":"47","hashOfConfig":"29"},{"size":2504,"mtime":1618573636639,"results":"48","hashOfConfig":"29"},{"size":2959,"mtime":1618573268018,"results":"49","hashOfConfig":"29"},{"size":3706,"mtime":1618934640179,"results":"50","hashOfConfig":"29"},{"size":1475,"mtime":1618934530603,"results":"51","hashOfConfig":"29"},{"size":1165,"mtime":1618934053394,"results":"52","hashOfConfig":"29"},{"size":704,"mtime":1618881647145,"results":"53","hashOfConfig":"29"},{"size":815,"mtime":1618881634872,"results":"54","hashOfConfig":"29"},{"size":7855,"mtime":1618943334806,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"skvv35",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\Desktop\\WebService\\src\\index.js",[],["120","121"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\App.js",["122","123","124"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\excercise1.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../assets/css/login.css\"\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n   Input\r\n  } from \"reactstrap\";\r\nimport '../styles/login.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as questionaction from \"../store/actions/questions.action\";\r\nimport _, { matches, toInteger } from 'lodash';\r\nimport moment from 'moment';\r\n\r\nlet questionList={\r\n    \"1\":{\r\n        \"question\":\"Calculate the difference between two dates\",\r\n        \"parameters\":[\"day\",\"month\",\"year\",\"hour\",\"minute\",\"second\"],\r\n        \"description\":\"To calculate the actual diffence between two give Dates.\",\r\n        \"type\":[\"datetime-local\",\"datetime-local\"],\r\n        \"no_of_inputs\":2,\r\n        \"date\":true,\r\n        \"title\":[\"Date 1\",\"Date 2\"],\r\n        \"result\":[\"Number of Days\",\"Number of Months\",\"Number of Years\",\"Number of Hours\",\"Number of Minutes\",\"Number of Seconds\"]\r\n\r\n        },\r\n    \"2\":{\r\n        \"question\":\"Perform Set theory operations such as Union, Minus, Intersection for the group of data\",\r\n        \"parameters\":[\"set_a\",\"set_b\"],\r\n        \"description\":\"To perform set theory operations on give 2 sets.\",\r\n        \"type\":[\"text\",\"text\"],\r\n        \"no_of_inputs\":2,\r\n        \"title\":[\"Set 1\",\"Set 2\"],\r\n        \"result\":[\"Union\",\"Union All\",\"Intersection\",\"Minus(A-B)\",\"Minus(B-A)\"]\r\n        },\r\n    \"3\":{\r\n        \"question\":\"Perform matrix operations like Transpose, Lower Diagonal (Left & Right), Upper Diagonal (Left & Right) and Swivel\",\r\n        \"parameters\":[\"order\",\"matrix_a\"],\r\n        \"description\":\"To matrix operations like Transpose, Lower Diagonal (Left & Right), Upper Diagonal (Left & Right) and Swivel on give matrix\",\r\n        \"type\":[\"number\",\"text\"],\r\n        \"no_of_inputs\":2,\r\n        \"title\":[\"Order\",\"Matrix\"],\r\n        \"result\":[\"Transpose\",\"Left Lower Diagonal\",\"Right Lower Diagonal\",\"Left Upper Diagonal\",\"Rigth Upper Diagonal\",\"Swivel Matrix\"]\r\n\r\n        },\r\n    \"4\":{\r\n        \"question\":\"Convert the figure into words in currency\",\r\n        \"parameters\":[\"currency_type\",\"currency\"],\r\n        \"description\":\"To Convert the figure into words in currency\",\r\n        \"type\":[\"select\",\"number\"],\r\n        \"no_of_inputs\":2,\r\n        \"title\":[\"Currency Type\",\"Currency\"],\r\n        \"result\":[\"Currency\",\"Currency in Words\"]\r\n        \r\n        },\r\n    \"5\":{\r\n        \"question\":\"Implement the RSA algorithm for encryption and decryption\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"To Implement the RSA algorithm for encryption and decryption\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"RSA ALgorithm\"],\r\n        \"result\":[\"Encrpted Message\",\"Original Message\"]\r\n    },\r\n    \"6\":{\r\n        \"question\":\"Generate the checksum value for the given sentence using md5 algorithm\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"To generate the checksum value for the given sentence using md5 algorithm.\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"md5 Algorithm\"],\r\n        \"result\":[\"HexaDecimal Equivalent\"]\r\n    },\r\n    \"7\":{\r\n        \"question\":\"Generate 128-bit bar code for numeric data\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"To generate Barcode for given message\",\r\n        \"type\":[\"number\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Bar Code Generation\"],\r\n        \"result\":[\"Bar Code\"]\r\n    },\r\n    \"8\":{\r\n        \"question\":\"Generate QR code for alphanumeric data\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"To generate Qr Code for given message\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"QR Code Generation\"],\r\n        \"result\":[\"QR Code\"]\r\n    },\r\n    \"9\":{\r\n        \"question\":\"Generate a one-time password (OTP) in numbers, alphabet and alphanumeric\",\r\n        \"parameters\":[\"otpLength\",\"alphanumeric\"],\r\n        \"description\":\"To Generate a one-time password (OTP) in numbers, alphabet and alphanumeric\",\r\n        \"type\":[\"number\",\"select\"],\r\n        \"no_of_inputs\":2,\r\n        \"title\":[\"OTP Generation\",\"OTP Type\"],\r\n        \"result\":[\"OTP\"]\r\n    },\r\n    \"10\":{\r\n        \"question\":\"Generate a Completely Automated Public Turing test to tell Computers and Humans Apart (CAPTCHA) for the given string\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"To Generate a Completely Automated Public Turing test to tell Computers and Humans Apart (CAPTCHA) for the given string\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Captcha Generation\"],\r\n        \"result\":[\"Captcha\"]\r\n    },\r\n}\r\nlet parametersList={\r\n    \"1\":[\"date_1\",\"date_2\"],\r\n    \"2\":[\"set_a\",\"set_b\"],\r\n    \"3\":[\"order\",\"matrix_a\"],\r\n    \"4\":[\"currency_type\",\"currency\"],\r\n    \"5\":[\"message\"],\r\n    \"6\":[\"message\"],\r\n    \"7\":[\"message\"],\r\n    \"8\":[\"message\"],\r\n    \"9\":[\"otpLength\",\"alphanumeric\"],\r\n    \"10\":[\"message\"],\r\n}\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            qNo:1,\r\n            currentQuestion:{},\r\n            backendList:[\"Python\",\"JavaScript\",\"PHP\"],\r\n            currency_type:[\"Rupee\",\"Dollar\",\"Euro\",\"Pound\"],\r\n            alphanumeric:[\"Number\",\"Alphabet\",\"AlphaNumeric\"],\r\n            selectedBackend:\"Python\",\r\n            formdata:{\r\n                \"day_1\":0,\r\n                \"month_1\":0,\r\n                \"year_1\":0,\r\n                \"hour_1\":0,\r\n                \"minute_1\":0,\r\n                \"second_1\":0,         \r\n                \"day_2\":0,\r\n                \"month_2\":0,\r\n                \"year_2\":0,\r\n                \"hour_2\":0,\r\n                \"minute_2\":0,\r\n                \"second_2\":0,\r\n                \"set_a\":\"\",\r\n                \"set_b\":\"\",\r\n                \"order\":0,\r\n                \"matrix\":\"\",\r\n                \"currency_amount\":0,\r\n                \"message\":\"\",\r\n                \"currency_type\":\"Rupee\",\r\n                \"alphanumeric\":\"AlphaNumeric\"\r\n            },\r\n            validateMsg:\"\",\r\n            result_data:[],\r\n            result_collection:[],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.questionLoader(this.state.qNo)\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let { formdata,qNo,selectedBackend } = { ...this.state }\r\n        if(this.validateState()){ \r\n\r\n        let fd = new FormData()\r\n        fd=this.setParameters(qNo)\r\n        this.props.distributer(fd,qNo,selectedBackend).then(response => {\r\n            console.log(\"her\",response,response['data'].status)\r\n            if(response['data'].status===200){\r\n              let data=response['data']    \r\n              let question = data['question']\r\n              let result= data['result']              \r\n              let params = questionList[question]['result']\r\n              let output={}\r\n              let error=\"\"\r\n                if(data['error']){\r\n                    error=data['error']\r\n                }else{\r\n                  params.map((key,ind)=>{\r\n                        output[key]=result[ind]\r\n                  })\r\n                }\r\n\r\n              let obj={\r\n                  question:question,\r\n                  result:output,\r\n                  language:data['language'],\r\n                  title:data['title'],\r\n                  params:data['params'],\r\n                  time:moment().format('LT'),\r\n                  error:error,\r\n              }\r\n              let {result_data}={...this.state}\r\n              result_data.push(obj)\r\n              console.log(obj)\r\n              this.setState({result_data})\r\n              this.questionLoader(qNo)\r\n            }else{\r\n                \r\n              this.toasterHandler(\"error\", \"Cant reach the server\")\r\n            }\r\n          }).catch((err)=>{\r\n            this.toasterHandler(\"error\", \"Cant reach the server\")\r\n          })\r\n        }\r\n    }\r\n\r\n    setParameters(qNo){\r\n        let { formdata } = { ...this.state }\r\n        let fd = new FormData()\r\n        let params=parametersList[qNo]\r\n        if(qNo===1){\r\n            fd.append(\"date_1\",formdata['day_1']+\"/\"+formdata['month_1']+\"/\"+formdata['year_1']+\"/\"+formdata['hour_1']+\"/\"+formdata['minute_1']+\"/\"+formdata['second_1']+\"/\")\r\n            fd.append(\"date_2\",formdata['day_2']+\"/\"+formdata['month_2']+\"/\"+formdata['year_2']+\"/\"+formdata['hour_2']+\"/\"+formdata['minute_2']+\"/\"+formdata['second_2']+\"/\")\r\n        }else{\r\n            params.map((key,id)=>{\r\n                fd.append(key,formdata[key])\r\n            })\r\n        }\r\n        return fd\r\n    }\r\n  \r\n    handleBackendChange=(e)=>{\r\n        this.setState({selectedBackend:e.target.value})\r\n    }\r\n    toasterHandler = (type, msg) => {\r\n        toast[type](msg, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n    }\r\n\r\n    questionLoader=(qNo)=>{\r\n        let { currentQuestion,result_collection,result_data } = { ...this.state }\r\n        currentQuestion=questionList[qNo]\r\n        result_collection=_.reverse(_.filter(result_data,{ 'question':qNo}));\r\n        this.setState({currentQuestion,result_collection})\r\n\r\n    }\r\n\r\n    handleNextQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo+1\r\n        if(qNo>Object.keys(questionList).length){\r\n            qNo=1\r\n        }\r\n        this.questionLoader(qNo)\r\n        this.setState({qNo})\r\n    }\r\n\r\n    handlePreviousQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo-1\r\n        if(qNo<1){\r\n            qNo=Object.keys(questionList).length\r\n        }\r\n        this.questionLoader(qNo)\r\n        this.setState({qNo})\r\n    }\r\n\r\n    getName=(name)=>{\r\n            name = name.replace(\"_\", \" \")\r\n            name = _.startCase(name);\r\n            return name\r\n    }\r\n    handleChange=(e)=>{\r\n        console.log(e.target.name,e.target.value)\r\n        let { formdata } = { ...this.state }\r\n        formdata[e.target.name] = e.target.value       \r\n        this.setState({ formdata })\r\n    }\r\n    validateState(){\r\n        let {formdata ,qNo,validateMsg}={...this.state}\r\n        let flag = 0\r\n        if(qNo===1){\r\n            let date1=this.dateValidation(formdata[\"day_1\"],formdata[\"month_1\"],formdata[\"year_1\"],formdata[\"hour_1\"],formdata[\"minute_1\"],formdata[\"second_1\"])\r\n            let date2=this.dateValidation(formdata[\"day_2\"],formdata[\"month_2\"],formdata[\"year_2\"],formdata[\"hour_2\"],formdata[\"minute_2\"],formdata[\"second_2\"])\r\n            if(date1 && date2){\r\n                return true\r\n            }else{\r\n                validateMsg=\"Invalid Date\"\r\n            }\r\n        }else{\r\n            return true\r\n        }\r\n        \r\n        this.setState({validateMsg},()=>{\r\n            this.toasterHandler(\"error\", validateMsg)\r\n            return false\r\n        })\r\n        \r\n    }\r\n\r\n    dateValidation(day,month,year,hour,minute,second){\r\n\r\n            if(day!=\"\" && month!=\"\" && year!=\"\" && minute!=\"\" && second!=\"\" && hour>=0 && hour<24 && minute>=0 && minute<=60 && second>=0 && second<=60 && day>=1 && day<=31 && month>=1 && month<=12 && year>=1){\r\n                return true\r\n            }\r\n            return false\r\n    }\r\n\r\n    printSet=(set)=>{\r\n        let res=\"[ \"\r\n        set.map((val,ind)=>{\r\n            if(ind!=0)\r\n                res=res+\",\"+val\r\n            else    \r\n                res=res+val\r\n        })\r\n        res=res+\" ]\"\r\n        return res\r\n    }\r\n    printMatrix=(value,ind)=>{\r\n        let {formdata}={...this.state}\r\n        if(value){\r\n            if(ind==0){\r\n                    return (value+ \" * \"+value)\r\n            }else{\r\n                let array=value.split(/\\s+/);\r\n                let order=formdata['order']\r\n                if(order>1){\r\n                    let count=0;\r\n                    let matrix=[]\r\n                    let temp=[]\r\n                    if(array.length>=(order*order))\r\n                        array.splice(order*order+1,array.length)\r\n                    array.map((val,ind)=>{\r\n                        \r\n                        if(count === (toInteger(order))){\r\n                            matrix.push(temp)\r\n                            temp=[]\r\n                            temp.push(val)\r\n                            count=1\r\n                        }else{\r\n                            temp.push(val)\r\n                            count=count+1\r\n                        }\r\n                    })\r\n                    return this.matrixGen(matrix)\r\n                }else{\r\n                    this.toasterHandler('error',\"Enter valid Order\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    matrixGen=(matrix)=>{\r\n        return (\r\n            <div className=\"m-1\">\r\n              {matrix.map((row, i) => (\r\n                <div key={i}>\r\n                  {row.map((col, j) => (\r\n                    <span className=\"m-1\" key={j}>{col}</span>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          );\r\n    }\r\n    render() {\r\n        let {qNo,currentQuestion,backendList,formdata,result_collection}={...this.state}\r\n        return (\r\n             <div className=\"main-container\">\r\n               <div className=\"question-container shadow-lg p-3 mb-5 bg-white rounded\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                            <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handlePreviousQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-left fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                                <button className=\"btn-success btn-lg ml-2 disable\">\r\n                                <span className=\"m-2\">{\"Question:    \"+ qNo }</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"question-text  d-flex align-items-center\">\r\n                                  <span className=\"text-info font-weight-bold\">  {currentQuestion && currentQuestion[\"question\"] && currentQuestion[\"question\"]}</span>\r\n                            </div>\r\n                        <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handleNextQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-right fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                        </div>\r\n                        \r\n                </div>\r\n               </div>\r\n               <div className=\"row d-flex justify-content-between m-2\">\r\n                   <div className=\"border col-2 parameter-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                   <div class=\"card mt-2\">\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title font-weight-bold text-info\">Description</h5>\r\n                        <p class=\"card-text\">  \r\n                       {currentQuestion && currentQuestion[\"description\"] && currentQuestion[\"description\"]}\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                   <div class=\"card mt-3\">\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title font-weight-bold text-info\">Parameters</h5>\r\n                        <p class=\"card-text\">  \r\n                        <ul>\r\n                            {currentQuestion && currentQuestion[\"parameters\"] && currentQuestion[\"parameters\"].map((item,ind)=>\r\n                                <li key={ind}>{this.getName(item)}</li>\r\n                            )}\r\n                        </ul>\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                  \r\n                   </div>\r\n                   <div className=\"border col m-2 input-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                     <span className=\"font-weight-bold text-primary h4\">Input</span>\r\n                     <hr></hr>\r\n                     <div className=\"inputContainer\">\r\n                        {currentQuestion && currentQuestion[\"no_of_inputs\"] && [...Array(currentQuestion[\"no_of_inputs\"])].map((item,ind)=>\r\n                           \r\n                           currentQuestion[\"date\"]?\r\n                                <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title font-weight-bold text-danger\">{currentQuestion[\"title\"][ind]+\":\"}</h5>\r\n                                    <div class=\"card-text row\">  \r\n                                        {currentQuestion[\"parameters\"].map((key,id)=>\r\n                                            <div key={id} className=\"col m-1\">\r\n                                            <label>{this.getName(key)}</label>\r\n                                                <input  className=\"form-control\" type={\"number\"} name={key+\"_\"+(ind+1)} value={formdata[key+\"_\"+(ind+1)]} min=\"0\" onChange={e=>this.handleChange(e)}></input>\r\n                                            </div> \r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                                </div>\r\n                  \r\n                           :\r\n                           <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title font-weight-bold text-danger\">{currentQuestion[\"title\"][ind]+\":\"}</h5>\r\n                                    <p class=\"card-text\">  \r\n                                        \r\n                                        {currentQuestion[\"type\"][ind]!==\"select\"?\r\n                                            <input key={ind} className=\"form-control\" name={currentQuestion[\"parameters\"][ind]} value={formdata[currentQuestion[\"parameters\"][ind]]} type={currentQuestion[\"type\"][ind]} onChange={e=>this.handleChange(e)}></input>\r\n                                            :\r\n                                            <Input type=\"select\" name={currentQuestion[\"parameters\"][ind]} id={currentQuestion[\"type\"][ind]} onChange={e=>this.handleChange(e)} value={formdata[currentQuestion[\"parameters\"][ind]]}>\r\n                                                {\r\n                                                    currentQuestion[\"parameters\"][ind]===\"currency_type\"?\r\n                                                    \r\n                                                    this.state.currency_type.map((item,ind)=>\r\n                                                        <option value={item} key={ind}>{item}</option>\r\n                                                    ):\r\n                                                    this.state.alphanumeric.map((item,ind)=>\r\n                                                    <option value={item} key={ind}>{item}</option>\r\n                                                )\r\n                                                }\r\n                                            </Input>\r\n                                        }\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                       \r\n                         )}\r\n                     </div>\r\n                    \r\n                   \r\n                     <div className=\"m-2 row d-flex justify-content-end InputFooter \">\r\n                     <div className=\"mr-4 col-9 inputDisplay border\">\r\n                           <span className=\"text-dark  h6\">Given Input:</span>\r\n                           <br></br>\r\n                           {\r\n                               qNo===1?\r\n                               <div className=\"m-1\">\r\n                               {[...Array(2)].map((item,ind)=>\r\n                                  <div className=\"mt-4\">\r\n                                      <span className=\"text-primary h5 font-weight-bold\">{\"Date \" + (ind+1)}</span><br></br>\r\n                                      <div className=\"h5 m-1\">\r\n                                          {formdata[\"day_\"+(ind+1)]+\"/\"+formdata[\"month_\"+(ind+1)]+\"/\"+formdata[\"year_\"+(ind+1)]+\"  -  \"+formdata[\"hour_\"+(ind+1)]+\":\"+formdata[\"minute_\"+(ind+1)]+\":\"+formdata[\"second_\"+(ind+1)]}\r\n                                      </div>\r\n                                  </div>\r\n                               )}\r\n                            </div>\r\n                        :\r\n                               questionList && questionList[qNo][\"parameters\"].map((key,ind)=>      \r\n                               <div className=\"mt-4\">\r\n                               <span className=\"text-primary h5 font-weight-bold\">{this.getName(key)}</span><br></br>\r\n                               <div className=\"h5 m-1\">\r\n                                   \r\n                                   {\r\n                                    qNo===2?   \r\n                                       <span>{\"[\"+ formdata[key].split(' ').join(',') +\"]\"}</span>\r\n                                       :\r\n                                    qNo===3?\r\n                                   \r\n                                        this.printMatrix(formdata[key],ind)\r\n                                        :\r\n\r\n                                       <span>{formdata[key]}</span>\r\n                                   }\r\n                                </div>\r\n                             </div>\r\n                               )\r\n                           }\r\n                    </div>\r\n                        <div className=\"mt-5\">\r\n                            <div >\r\n                                <Input type=\"select\" name=\"backend\" id=\"backend\" onChange={e=>this.handleBackendChange(e)}>\r\n                                    {backendList && backendList.map((item,ind)=>\r\n                                            <option key={ind}>{item}</option>\r\n                                    )}         \r\n                                </Input>\r\n                            </div><br></br>\r\n                            <div>\r\n                                    <button className=\"btn-primary btn-lg ml-2\" onClick={e=>this.handleSubmit(e)}>\r\n                                    Submit\r\n                                    </button>\r\n                            </div>\r\n                        </div>\r\n                     </div>\r\n                   </div>\r\n                   <div className=\"border col m-2 output-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                        <span className=\"font-weight-bold text-primary h4\">Output</span>\r\n                        <hr></hr>\r\n\r\n                        <div className=\"output-pane\">\r\n                        {\r\n                            result_collection && result_collection.map((key,ind)=>\r\n                                <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h6 class=\"card-title row font-weight-bold text-info h6\">\r\n                                        <div className=\"col-10\">{(result_collection.length - ind) +')'+key['title']}<span className=\"text-success\">{' ('+key['language']+')'}</span></div>\r\n                                        <div className=\"col-2\">{key['time']}</div>\r\n                                        </h6>\r\n                                    <div class=\"card-text\"> \r\n                                    <span className=\"font-weight-bold\">Input</span> \r\n                                    <ul className=\"bl-list\"> \r\n                                    {\r\n                                        key['params'].map((que,ind)=>\r\n                                        <li key={ind}><span className=\"font-weight-bold\">{this.getName(parametersList[key['question']][ind]) +' : '}</span>\r\n                                      \r\n                                            {key['question']===2?\r\n                                                    this.printSet(que)\r\n                                                :\r\n                                                    que\r\n                                            }\r\n                                        \r\n                                        </li>\r\n                                        )\r\n                                    }\r\n                                    </ul>\r\n                                    <hr></hr>\r\n                                    {\r\n                                    !_.isEmpty(key['result']) ?\r\n                                    <div>\r\n                                        <span className=\"font-weight-bold\">Result</span> \r\n                                        <ul className=\"bl-list\"> \r\n                                        {\r\n                                            Object.keys(key['result']).map((ans,ind)=>\r\n                                            <li key={ind}><span className=\"font-weight-bold\">{ans+\" : \"}</span>\r\n                                                {\r\n                                                    key['question']==2?\r\n                                                        this.printSet(key['result'][ans])\r\n                                                    :\r\n                                                    key['question']==3?\r\n                                                        this.matrixGen(key['result'][ans])\r\n                                                    :\r\n\r\n                                                     key['question']==10 || key['question']==8 || key['question']==7?\r\n                                                        <div>\r\n                                                            <img src={`data:image/jpeg;base64,${key['result'][ans]}`} />\r\n                                                        </div>\r\n                                                    :\r\n                                                    key['result'][ans]}</li>\r\n                                            )\r\n                                        }\r\n                                        </ul>\r\n                                    </div>:\r\n                                           <span className=\"font-weight-bold h5 text-danger\">{key['error']}</span> \r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            )\r\n                        }\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        distributer: (data,question,backend) => { return dispatch(questionaction.distributer(data,question,backend)); },\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));",["145","146"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\excercise3.js",["147","148","149","150","151","152","153","154","155"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../assets/css/login.css\"\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n   Input\r\n  } from \"reactstrap\";\r\nimport '../styles/login.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as questionaction from \"../store/actions/questions.action\";\r\nimport _, { matches, toInteger } from 'lodash';\r\nimport moment from 'moment';\r\n\r\nlet questionList={\r\n    \"huffman_technique\":{\r\n        \"question\":\"Implement Huffman Coding Techniques in Text Compression.\",\r\n        \"parameters\":[\"huffman_message\"],\r\n        \"description\":\"Huffman Lossless Data Compression\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Message\"],\r\n        \"result\":[\"Huffman Tree\"]\r\n        },\r\n    \"run_length_algorithm\":{\r\n        \"question\":\"Implement Run-length Coding Techniques in Text Compression\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"Run-length Text Compression.\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Message\"],\r\n        \"result\":[\"Compressed\",\"DeCompressed\"]\r\n        },\r\n    \"Lempel_Ziv_Welch\":{\r\n        \"question\":\"Implement Lempel-Ziv-Welch (LZW) Coding Techniques in Text Compression\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"Lempel-Ziv-Welch (LZW)  Text Compression.\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Message\"],\r\n        \"result\":[\"Compressed\",\"DeCompressed\"]\r\n        },\r\n    \"Lossless_Compressions\":{\r\n        \"question\":\"Implement Lossless Text Compression Techniques\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"Bzip2, Lempel–Ziv–Markov chain algorithm ANd Lempel–Ziv–Storer–Szymanski (Deflate) Text Compression Techniques.\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Message\"],\r\n        \"result\":[\"BZ2 Compressed\",\"BZ2 DeCompressed\",\"LZMA Compressed\",\"LZMA DeCompressed\",\"LZSS(Deflate) Compressed\",\"LZSS(Deflate) DeCompressed\"]\r\n        },\r\n}\r\nlet parametersList={\r\n    \"huffman_technique\":[\"huffman_message\"],\r\n    \"run_length_algorithm\":[\"message\"],\r\n    \"Lempel_Ziv_Welch\":[\"message\"],\r\n    \"Lossless_Compressions\":[\"message\"]\r\n}\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            qNo:1,\r\n            currentQuestion:{},\r\n            backendList:[\"Python\",\"JavaScript\",\"PHP\"],\r\n            alphanumeric:[\"Number\",\"Alphabet\",\"AlphaNumeric\"],\r\n            all_questions:[\"\",\"huffman_technique\",\"run_length_algorithm\",\"Lempel_Ziv_Welch\",\"Lossless_Compressions\"],\r\n            selectedBackend:\"Python\",\r\n            formdata:{\r\n               huffman_message:\"\",\r\n               message:\"\",\r\n            },\r\n            validateMsg:\"\",\r\n            result_data:[],\r\n            result_collection:[],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.questionLoader(this.state.qNo)\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let { formdata,qNo,selectedBackend,all_questions } = { ...this.state }\r\n        if(this.validateState()){ \r\n\r\n        let fd = new FormData()\r\n        fd=this.setParameters(qNo)\r\n        this.props.distributer(fd,all_questions[qNo],selectedBackend).then(response => {\r\n            console.log(\"her\",response,response['data'].status)\r\n            if(response['data'].status===200){\r\n                \r\n              let data=response['data']\r\n              console.log(\"here\",data)    \r\n              let question = data['question']\r\n              let result= data['result']              \r\n              let params = questionList[question]['result']\r\n              let output={}\r\n              let error=\"\"\r\n                if(data['error']){\r\n                    error=data['error']\r\n                }else{\r\n                  params.map((key,ind)=>{\r\n                        output[key]=result[ind]\r\n                  })\r\n                }\r\n\r\n              let obj={\r\n                  question:question,\r\n                  result:output,\r\n                  language:data['language'],\r\n                  title:data['title'],\r\n                  params:data['params'],\r\n                  time:moment().format('LT'),\r\n                  error:error,\r\n              }\r\n              let {result_data}={...this.state}\r\n              console.log(obj)\r\n              result_data.push(obj)\r\n              this.setState({result_data})\r\n              this.questionLoader(qNo)\r\n            }else{\r\n                \r\n              this.toasterHandler(\"error\", \"Cant reach the server\")\r\n            }\r\n          }).catch((err)=>{\r\n            this.toasterHandler(\"error\", err)\r\n          })\r\n        }\r\n    }\r\n\r\n    setParameters(qNo){\r\n        let { formdata,all_questions } = { ...this.state }\r\n        let fd = new FormData()\r\n        let params=parametersList[all_questions[qNo]]\r\n            params.map((key,id)=>{\r\n                fd.append(key,formdata[key])\r\n            })\r\n        return fd\r\n    }\r\n  \r\n    handleBackendChange=(e)=>{\r\n        this.setState({selectedBackend:e.target.value})\r\n    }\r\n    toasterHandler = (type, msg) => {\r\n        toast[type](msg, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n    }\r\n\r\n    questionLoader=(qNo)=>{\r\n        let { all_questions,currentQuestion,result_collection,result_data } = { ...this.state }\r\n        currentQuestion=questionList[all_questions[qNo]]\r\n        result_collection=_.reverse(_.filter(result_data,{ 'question':all_questions[qNo]}));\r\n        this.setState({currentQuestion,result_collection})\r\n\r\n    }\r\n\r\n    handleNextQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo+1\r\n        if(qNo>Object.keys(questionList).length){\r\n            qNo=1\r\n        }\r\n        this.questionLoader(qNo)\r\n        this.setState({qNo})\r\n    }\r\n\r\n    handlePreviousQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo-1\r\n        if(qNo<1){\r\n            qNo=Object.keys(questionList).length\r\n        }\r\n        this.questionLoader(qNo)\r\n        this.setState({qNo})\r\n    }\r\n\r\n    getName=(name)=>{\r\n            console.log(name)\r\n            if(name){\r\n            name = name.replace(\"_\", \" \")\r\n            name = _.startCase(name);\r\n            }\r\n            return name\r\n    }\r\n    handleChange=(e)=>{\r\n        let { formdata } = { ...this.state }\r\n        formdata[e.target.name] = e.target.value       \r\n        this.setState({ formdata })\r\n    }\r\n    validateState(){\r\n        let {formdata ,qNo,validateMsg}={...this.state}\r\n        let flag = 0\r\n    \r\n            return true\r\n        \r\n        \r\n        this.setState({validateMsg},()=>{\r\n            this.toasterHandler(\"error\", validateMsg)\r\n            return false\r\n        })\r\n        \r\n    }\r\n\r\n   \r\n    render() {\r\n        let {qNo,currentQuestion,backendList,formdata,result_collection,all_questions}={...this.state}\r\n        return (\r\n             <div className=\"main-container\">\r\n               <div className=\"question-container shadow-lg p-3 mb-5 bg-white rounded\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                            <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handlePreviousQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-left fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                                <button className=\"btn-success btn-lg ml-2 disable\">\r\n                                <span className=\"m-2\">{\"Question:    \"+ qNo }</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"question-text  d-flex align-items-center\">\r\n                                  <span className=\"text-info font-weight-bold\">  {currentQuestion && currentQuestion[\"question\"] && currentQuestion[\"question\"]}</span>\r\n                            </div>\r\n                        <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handleNextQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-right fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                        </div>\r\n                        \r\n                </div>\r\n               </div>\r\n               <div className=\"row d-flex justify-content-between m-2\">\r\n                   <div className=\"border col-2 parameter-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                   <div class=\"card mt-2\">\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title font-weight-bold text-info\">Description</h5>\r\n                        <p class=\"card-text\">  \r\n                       {currentQuestion && currentQuestion[\"description\"] && currentQuestion[\"description\"]}\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                   <div class=\"card mt-3\">\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title font-weight-bold text-info\">Parameters</h5>\r\n                        <p class=\"card-text\">  \r\n                        <ul>\r\n                            {currentQuestion && currentQuestion[\"parameters\"] && currentQuestion[\"parameters\"].map((item,ind)=>\r\n                                <li key={ind}>{this.getName(item)}</li>\r\n                            )}\r\n                        </ul>\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                  \r\n                   </div>\r\n                   <div className=\"border col m-2 input-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                     <span className=\"font-weight-bold text-primary h4\">Input</span>\r\n                     <hr></hr>\r\n                     <div className=\"inputContainer\">\r\n                        {currentQuestion && currentQuestion[\"no_of_inputs\"] && [...Array(currentQuestion[\"no_of_inputs\"])].map((item,ind)=>\r\n                           \r\n                           currentQuestion[\"date\"]?\r\n                                <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title font-weight-bold text-danger\">{currentQuestion[\"title\"][ind]+\":\"}</h5>\r\n                                    <div class=\"card-text row\">  \r\n                                        {currentQuestion[\"parameters\"].map((key,id)=>\r\n                                            <div key={id} className=\"col m-1\">\r\n                                            <label>{this.getName(key)}</label>\r\n                                                <input  className=\"form-control\" type={\"number\"} name={key+\"_\"+(ind+1)} value={formdata[key+\"_\"+(ind+1)]} min=\"0\" onChange={e=>this.handleChange(e)}></input>\r\n                                            </div> \r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                                </div>\r\n                  \r\n                           :\r\n                           <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title font-weight-bold text-danger\">{currentQuestion[\"title\"][ind]+\":\"}</h5>\r\n                                    <p class=\"card-text\">  \r\n                                        \r\n                                        {currentQuestion[\"type\"][ind]!==\"select\"?\r\n                                            <input key={ind} className=\"form-control\" name={currentQuestion[\"parameters\"][ind]} value={formdata[currentQuestion[\"parameters\"][ind]]} type={currentQuestion[\"type\"][ind]} onChange={e=>this.handleChange(e)}></input>\r\n                                            :\r\n                                            <Input type=\"select\" name={currentQuestion[\"parameters\"][ind]} id={currentQuestion[\"type\"][ind]} onChange={e=>this.handleChange(e)} value={formdata[currentQuestion[\"parameters\"][ind]]}>\r\n                                                {\r\n                                                    currentQuestion[\"parameters\"][ind]===\"currency_type\"?\r\n                                                    \r\n                                                    this.state.currency_type.map((item,ind)=>\r\n                                                        <option value={item} key={ind}>{item}</option>\r\n                                                    ):\r\n                                                    this.state.alphanumeric.map((item,ind)=>\r\n                                                    <option value={item} key={ind}>{item}</option>\r\n                                                )\r\n                                                }\r\n                                            </Input>\r\n                                        }\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                       \r\n                         )}\r\n                     </div>\r\n                    \r\n                   \r\n                     <div className=\"m-2 row d-flex justify-content-end InputFooter \">\r\n                     <div className=\"mr-4 col-9 inputDisplay border\">\r\n                           <span className=\"text-dark  h6\">Given Input:</span>\r\n                           <br></br>\r\n                           {\r\n                               questionList && questionList[all_questions[qNo]][\"parameters\"].map((key,ind)=>      \r\n                               <div className=\"mt-4\">\r\n                               <span className=\"text-primary h5 font-weight-bold\">{this.getName(key)}</span><br></br>\r\n                               <div className=\"h5 m-1\">\r\n                                   \r\n                                   {\r\n                                    qNo===0?   \r\n                                       <span>{\"[\"+ formdata[key].split(' ').join(',') +\"]\"}</span>\r\n                                 :\r\n                                       <span>{formdata[key]}</span>\r\n                                   }\r\n                                </div>\r\n                             </div>\r\n                               )\r\n                           }\r\n                    </div>\r\n                        <div className=\"mt-5\">\r\n                            <div >\r\n                                <Input type=\"select\" name=\"backend\" id=\"backend\" onChange={e=>this.handleBackendChange(e)}>\r\n                                    {backendList && backendList.map((item,ind)=>\r\n                                            <option key={ind}>{item}</option>\r\n                                    )}         \r\n                                </Input>\r\n                            </div><br></br>\r\n                            <div>\r\n                                    <button className=\"btn-primary btn-lg ml-2\" onClick={e=>this.handleSubmit(e)}>\r\n                                    Submit\r\n                                    </button>\r\n                            </div>\r\n                        </div>\r\n                     </div>\r\n                   </div>\r\n                   <div className=\"border col m-2 output-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                        <span className=\"font-weight-bold text-primary h4\">Output</span>\r\n                        <hr></hr>\r\n\r\n                        <div className=\"output-pane\">\r\n                        {\r\n                            result_collection && result_collection.map((key,ind)=>\r\n                                <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h6 class=\"card-title row font-weight-bold text-info h6\">\r\n                                        <div className=\"col-10\">{(result_collection.length - ind) +')'+key['title']}<span className=\"text-success\">{' ('+key['language']+')'}</span></div>\r\n                                        <div className=\"col-2\">{key['time']}</div>\r\n                                        </h6>\r\n                                    <div class=\"card-text\"> \r\n                                    <span className=\"font-weight-bold\">Input</span> \r\n                                    <ul className=\"bl-list\"> \r\n                                    {\r\n                                        key['params'].map((que,ind)=>\r\n                                        <li key={ind}><span className=\"font-weight-bold\">{\r\n                                        this.getName(parametersList[key['question']][ind]) +' : '}</span>\r\n                                      \r\n                                            {\r\n                                                    que\r\n                                            }\r\n                                        \r\n                                        </li>\r\n                                        )\r\n                                    }\r\n                                    </ul>\r\n                                    <hr></hr>\r\n                                    {\r\n                                    !_.isEmpty(key['result']) ?\r\n                                    <div>\r\n                                        <span className=\"font-weight-bold\">Result</span> \r\n                                        <ul className=\"bl-list\"> \r\n                                        {\r\n                                            Object.keys(key['result']).map((ans,ind)=>\r\n                                            <li key={ind}><span className=\"font-weight-bold mt-1\">{ans+\" : \"}</span>\r\n                                                {\r\n                                                    key['question']===\"huffman_technique\"?\r\n                                                    \r\n                                                    <ul className=\"bl-list\">   \r\n                                                    {key['result'][ans].map((val,ind)=>\r\n                                                    <li key={ind}>{val}</li>\r\n                                                    )}\r\n                                                    </ul>\r\n                                                    \r\n                                                    :\r\n                                                    key['result'][ans]}</li>\r\n                                            )\r\n                                        }\r\n                                        </ul>\r\n                                    </div>:\r\n                                           <span className=\"font-weight-bold h5 text-danger\">{key['error']}</span> \r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            )\r\n                        }\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        distributer: (data,question,backend) => { return dispatch(questionaction.distributer(data,question,backend)); },\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));",["156","157"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\excercise2.js",["158","159","160","161","162","163","164","165","166","167","168"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../assets/css/login.css\"\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n   Input\r\n  } from \"reactstrap\";\r\nimport '../styles/login.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as questionaction from \"../store/actions/questions.action\";\r\nimport _, { matches, toInteger } from 'lodash';\r\nimport moment from 'moment';\r\n\r\nlet questionList={\r\n    \"5\":{\r\n        \"question\":\"Design an Basic Statistics Calculator (Standard Deviation, Variance, Linear Regression)\",\r\n        \"subQuestion\":[\"Variance and Standard Deviation\",\"Linear Regression\"],\r\n        \"subQuestionList\":{\r\n            \"Variance and Standard Deviation\":{\r\n                \"question\":\"Variance and Standard Deviation\",\r\n                \"type\":[\"text\"],\r\n                \"parameters\":[\"Numberlist\"],\r\n                \"no_of_inputs\":1,\r\n                \"title\":[\"Set of Numbers\"],\r\n                \"result\":[\"Variance\",\"Standard Deviation\"]\r\n            },\r\n            \"Linear Regression\":{\r\n                \"question\":\"Linear Regression\",\r\n                \"type\":[\"text\",\"text\"],\r\n                \"parameters\":[\"xList\",\"yList\"],\r\n                \"no_of_inputs\":2,\r\n                \"title\":[\"Set of Numbers(X)\",\"Set of Numbers(Y)\"],\r\n                \"result\":[\"Linear Regression\"]\r\n            }\r\n        } \r\n        },\r\n    \"1\":{\r\n        \"question\":\"Design an Electrical Calculator (Amps, kW, kVA,VA,volts,watts,joules,kW, mAh,Wh)\",\r\n        \"subQuestion\":[\"Electric Convertion\"],\r\n        \"subQuestionList\":{\r\n                \"Electric Convertion\":{\r\n                    \"question\":\"Electric Convertion\",\r\n                    \"type\":[\"number\",\"number\",\"number\",\"number\",\"number\",\"number\",\"number\",\"number\",\"number\",\"number\"],\r\n                    \"parameters\":[\"amp\",\"volt\",\"watt\",\"time\",\"kw\",\"kva\",\"va\",\"joule\",\"mah\",\"wh\"],\r\n                    \"no_of_inputs\":10,\r\n                    \"title\":[\"Ampere\",\"Volts\",\"Watts\",\"Time\",\"KiloWatt(kW)\",\"kilovolt-ampere(kVA)\",\"volt-ampere(VA)\",\"joules\",\"milliamp Hour(mAh)\",\"watt-hour(Wh)\"],\r\n                    \"result\":[\"Ampere(Amps)\",\"volts\",\"watts\",\"KiloWatt(kW)\",\"kilovolt-ampere(kVA)\",\"Joule\",\"volt-ampere(VA)\",\"milliamp Hour(mAh)\",\"watt-hour(Wh)\",\"Time\"]\r\n            }\r\n        }\r\n        },\r\n    \"2\":{\r\n        \"question\":\"Design an Math-Log1 Calculator (Logarithm(log), Natural Logarithm (ln), Anti-logarithm)\",\r\n        \"subQuestion\":[\"Logarithm\",\"AntiLogarithm\"],\r\n        \"subQuestionList\":{\r\n            \"Logarithm\":{\r\n                \"question\":\"Logarithm\",\r\n                \"type\":[\"number\",\"number\"],\r\n                \"parameters\":[\"number\",\"base\"],\r\n                \"no_of_inputs\":2,\r\n                \"title\":[\"Logarithm\",\"Base\"],\r\n                \"result\":[\"Natural Logarithm(x)\",\"Logarithm(x)\"]\r\n            },\r\n            \"AntiLogarithm\":{\r\n                \"question\":\"AntiLogarithm\",\r\n                \"type\":[\"number\",\"number\"],\r\n                \"parameters\":[\"number\",\"base\"],\r\n                \"no_of_inputs\":2,\r\n                \"title\":[\"AntiLogarithm\",\"Base\"],\r\n                \"result\":[\"AntiLogarithm(x)\"]\r\n            }\r\n        }\r\n        },\r\n    \"3\":{\r\n        \"question\":\"Design an Math-Log2 Calculator (GCF,LCM, Squre-root, Cube-root and Nth-root )\",\r\n        \"subQuestion\":[\"GCF and LCM\",\"Square and Cube root\",\"Nth root\"],\r\n        \"subQuestionList\":{\r\n            \"GCF and LCM\":{\r\n                \"question\":\"GCF and LCM\",\r\n                \"type\":[\"text\"],\r\n                \"parameters\":[\"Numberlist\"],\r\n                \"no_of_inputs\":1,\r\n                \"title\":[\"Enter The Numbers\"],\r\n                \"result\":[\"GCF\",\"LCM\"]\r\n            },\r\n            \"Square and Cube root\":{\r\n                \"question\":\"Square and Cube root\",\r\n                \"type\":[\"number\"],\r\n                \"parameters\":[\"number\"],\r\n                \"no_of_inputs\":1,\r\n                \"title\":[\"Enter The Number\"],\r\n                \"result\":[\"Square root\",\"Cube root\"]\r\n            },\r\n            \"Nth root\":{\r\n                \"question\":\"Nth root\",\r\n                \"type\":[\"number\",\"number\"],\r\n                \"parameters\":[\"number\",\"place\"],\r\n                \"no_of_inputs\":2,\r\n                \"title\":[\"Number\",\"N Value\"],\r\n                \"result\":[\"Nth root\"]\r\n            }\r\n        }  \r\n        },\r\n    \"4\":{\r\n        \"question\":\"Design an Math-Log3 Calculator (Trigonometry – Sin, Cos, Tan, Arcsin, Arccos, Arctan, Sec, Cosec, Cot)\",\r\n        \"subQuestion\":[\"trignomentry\"],\r\n        \"subQuestionList\":{\r\n            \"trignomentry\":{\r\n            \"question\":\"trignomentry\",\r\n                \"type\":[\"number\",\"number\"],\r\n                \"parameters\":[\"degree\",\"radian\"],\r\n                \"checkbox\":true,\r\n                \"checkIndex\":0,\r\n                \"no_of_inputs\":1,\r\n                \"title\":[\"Degree\",\"Radian\"],\r\n                \"result\":[\"Sin\",\"Cos\",\"Tan\",\"Cosec\",\"Sec\",\"Cot\",\"ArcSine\",\"ArcCos\",\"ArcTan\"]\r\n        }\r\n    }\r\n    },\r\n}\r\n\r\nlet parametersList={\r\n    \"Variance and Standard Deviation\":[\"Numberlist\"],\r\n    \"Linear Regression\":[\"xList\",\"yList\"],\r\n    \"GCF and LCM\":[\"Numberlist\"],\r\n    \"Square and Cube root\":[\"number\"],\r\n    \"Nth root\":[\"number\",\"place\"],\r\n    \"trignomentry\":[\"degree\",\"radian\"],\r\n    \"Logarithm\":[\"number\",\"base\"],\r\n    \"AntiLogarithm\":[\"number\",\"base\"],\r\n    \"Electric Convertion\":[\"amp\",\"volt\",\"watt\",\"time\",\"kw\",\"kva\",\"va\",\"joule\",\"mah\",\"wh\"]\r\n}\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            qNo:1,\r\n            currentQuestion:{},\r\n            subQuestionList:[],\r\n            currentSubQuestion:{},\r\n            backendList:[\"Python\",\"JavaScript\",\"PHP\"],\r\n            selectedBackend:\"Python\",\r\n            formdata:{\r\n               \"Numberlist\":\"\",\r\n               \"xList\":\"\",\r\n               \"yList\":\"\",\r\n               \"number\":\"\",\r\n               \"place\":\"\",\r\n               \"radian\":\"\",\r\n               \"degree\":\"\",\r\n               \"amp\":\"\",\r\n               \"kw\":\"\",\r\n               \"kva\":\"\",\r\n               \"va\":\"\",\r\n               \"volt\":\"\",\r\n               \"watt\":\"\",\r\n               \"joule\":\"\",\r\n               \"mah\":\"\",\r\n               \"wh\":\"\",\r\n               \"time\":\"\",\r\n                \"base\":\"\",\r\n            },\r\n            validateMsg:\"\",\r\n            result_data:[],\r\n            result_collection:[],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.questionLoader(this.state.qNo,true)\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let { formdata,qNo,selectedBackend,currentSubQuestion } = { ...this.state }\r\n        if(this.validateState()){ \r\n\r\n        let fd = new FormData()\r\n        fd=this.setParameters()\r\n        this.props.distributer(fd,currentSubQuestion[\"question\"],selectedBackend).then(response => {\r\n            console.log(\"her\",response,response['data'].status)\r\n            if(response['data'].status===200){\r\n              let data=response['data']    \r\n              let question = data['question']\r\n              let result= data['result']              \r\n              let params = currentSubQuestion['result']\r\n              let output={}\r\n              let error=\"\"\r\n                if(data['error']){\r\n                    error=data['error']\r\n                }else{\r\n                  params.map((key,ind)=>{\r\n                        output[key]=result[ind]\r\n                  })\r\n                }\r\n\r\n              let obj={\r\n                  question:question,\r\n                  result:output,\r\n                  language:data['language'],\r\n                  title:data['title'],\r\n                  params:data['params'],\r\n                  time:moment().format('LT'),\r\n                  error:error,\r\n              }\r\n              let {result_data}={...this.state}\r\n              result_data.push(obj)\r\n              console.log(result_data)\r\n              this.setState({result_data})\r\n              this.questionLoader(qNo,false)\r\n            }else{\r\n                \r\n              this.toasterHandler(\"error\", \"Cant reach the server\")\r\n            }\r\n          }).catch((err)=>{\r\n            this.toasterHandler(\"error\", \"Cant reach the server\")\r\n          })\r\n        }\r\n    }\r\n\r\n    setParameters(){\r\n        let { formdata,currentSubQuestion } = { ...this.state }\r\n        let fd = new FormData()\r\n        let params=parametersList[currentSubQuestion[\"question\"]]\r\n        params.map((key,id)=>{\r\n            fd.append(key,formdata[key])\r\n        })\r\n        return fd\r\n    }\r\n  \r\n    handleBackendChange=(e)=>{\r\n        this.setState({selectedBackend:e.target.value})\r\n    }\r\n    toasterHandler = (type, msg) => {\r\n        toast[type](msg, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n    }\r\n\r\n    questionLoader=(qNo,flag)=>{\r\n        let { currentQuestion,subQuestionList,currentSubQuestion,result_collection,result_data } = { ...this.state }\r\n        currentQuestion=questionList[qNo]\r\n        subQuestionList=currentQuestion['subQuestion']\r\n        if(subQuestionList.length>0 && flag){\r\n            currentSubQuestion = currentQuestion['subQuestionList'][subQuestionList[0]]\r\n        }\r\n        else if(!flag){\r\n            currentSubQuestion = currentSubQuestion\r\n        }else{\r\n            currentSubQuestion = {}\r\n        }\r\n        result_collection=_.reverse(_.filter(result_data,{ 'question':currentSubQuestion[\"question\"]}));\r\n        this.setState({currentQuestion,result_collection,subQuestionList,currentSubQuestion})\r\n\r\n    }\r\n\r\n    handleNextQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo+1\r\n        if(qNo>Object.keys(questionList).length){\r\n            qNo=1\r\n        }\r\n        this.questionLoader(qNo,true)\r\n        this.setState({qNo})\r\n    }\r\n\r\n    handlePreviousQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo-1\r\n        if(qNo<1){\r\n            qNo=Object.keys(questionList).length\r\n        }\r\n        this.questionLoader(qNo,true)\r\n        this.setState({qNo})\r\n    }\r\n    getName=(name)=>{\r\n            name = name.replace(\"_\", \" \")\r\n            name = _.startCase(name);\r\n            return name\r\n    }\r\n    handleChange=(e)=>{\r\n        \r\n        let { formdata } = { ...this.state }\r\n        formdata[e.target.name] = e.target.value       \r\n        this.setState({ formdata })\r\n    }\r\n    validateState(){\r\n        let {formdata ,qNo,validateMsg}={...this.state}\r\n        let flag = 0\r\n       \r\n        return true\r\n        \r\n        \r\n        this.setState({validateMsg},()=>{\r\n            this.toasterHandler(\"error\", validateMsg)\r\n            return false\r\n        })\r\n        \r\n    }\r\n    handleSubQuestion=(e)=>{\r\n        console.log(e.target.value)\r\n        let { currentQuestion,result_collection,result_data,currentSubQuestion } = { ...this.state }\r\n        currentSubQuestion = currentQuestion['subQuestionList'][e.target.value]\r\n        result_collection=_.reverse(_.filter(result_data,{ 'question':currentSubQuestion[\"question\"]}));\r\n        this.setState({currentSubQuestion,result_collection})\r\n    }\r\n    handleInputChange=()=>{\r\n        let { currentSubQuestion,formdata} = { ...this.state }\r\n        currentSubQuestion['checkIndex']=currentSubQuestion['checkIndex']+1\r\n        if(currentSubQuestion['checkIndex']>currentSubQuestion['parameters'].length-1){\r\n            currentSubQuestion['checkIndex']=0\r\n        }\r\n        currentSubQuestion['parameters'].map((key)=>{\r\n            formdata[key]=\"\"\r\n        })\r\n        this.setState({currentSubQuestion,formdata})\r\n    }\r\n\r\n    render() {\r\n        let {qNo,currentQuestion,currentSubQuestion,subQuestionList,backendList,formdata,result_collection}={...this.state}\r\n        return (\r\n             <div className=\"main-container\">\r\n               <div className=\"question-container shadow-lg p-3 mb-5 bg-white rounded\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                            <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handlePreviousQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-left fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                                <button className=\"btn-success btn-lg ml-2 disable\">\r\n                                <span className=\"m-2\">{\"Question:    \"+ qNo }</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"question-text  d-flex align-items-center\">\r\n                                  <span className=\"text-info font-weight-bold\">  {currentQuestion && currentQuestion[\"question\"] && currentQuestion[\"question\"]}</span>\r\n                            </div>\r\n                        <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handleNextQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-right fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                        </div>\r\n                        \r\n                </div>\r\n               </div>\r\n               <div className=\"row d-flex justify-content-between m-2\">\r\n                    <div className=\"border col-5 m-2 input-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                        <div className=\"row\">\r\n                                <div className=\"col-4\">\r\n                                    <span className=\"font-weight-bold text-primary h4\">Input</span>\r\n                                </div>\r\n                                <div className=\"col-8\">\r\n                                    <div className=\"form-group\">\r\n                                        <label className=\"font-weight-bold text-primary h6\" for=\"sel1\">Sub-Question</label>\r\n                                        <select className=\"form-control\" id=\"sel1\" onChange={e=>this.handleSubQuestion(e)}>\r\n                                            {\r\n                                                subQuestionList.map((ques,ind)=>\r\n                                                    <option key={ind}>{ques}</option>\r\n                                                )\r\n                                            }\r\n                                         \r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                        </div>\r\n                     \r\n                     <hr className=\"bg-primary\"></hr>\r\n                     <div className=\"inputContainer\">\r\n                        {currentSubQuestion && currentSubQuestion[\"no_of_inputs\"] && [...Array(currentSubQuestion[\"no_of_inputs\"])].map((item,ind)=>\r\n                           \r\n                           <div class=\"card m-2\" key={ind}>\r\n                                {\r\n                                !currentSubQuestion[\"checkbox\"]?\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title font-weight-bold text-danger\">{currentSubQuestion[\"title\"][ind]+\":\"}</h5>\r\n                                    <p class=\"card-text\">                  \r\n                                        <input key={ind} className=\"form-control\" name={currentSubQuestion[\"parameters\"][ind]} value={formdata[currentSubQuestion[\"parameters\"][ind]]} type={currentSubQuestion[\"type\"][ind]} onChange={e=>this.handleChange(e)}></input>\r\n                                    </p>\r\n                                </div>\r\n                                :\r\n                                <div class=\"card-body\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"row col-12\">\r\n                                        <h5 class=\" m-2 card-title font-weight-bold text-danger\">{currentSubQuestion[\"title\"][currentSubQuestion[\"checkIndex\"]]+\":\"}</h5>\r\n                                        \r\n                                           <button   className=\"m-2 ml-4 btn btn-sm btn-success\" onClick={e=>this.handleInputChange()}>Change</button> \r\n                                        </div>\r\n                                    </div>\r\n                                    <p class=\"card-text\">                  \r\n                                      <input key={ind} className=\"form-control\" name={currentSubQuestion[\"parameters\"][currentSubQuestion[\"checkIndex\"]]} value={formdata[currentSubQuestion[\"parameters\"][currentSubQuestion[\"checkIndex\"]]]} type={currentSubQuestion[\"type\"][currentSubQuestion[\"checkIndex\"]]} onChange={e=>this.handleChange(e)}></input>      \r\n                                    </p>\r\n                                </div>\r\n                            }\r\n                            </div>\r\n                       \r\n                         )}\r\n                     </div>\r\n                    \r\n                   \r\n                     <div className=\"m-2 row d-flex justify-content-end InputFooter \">\r\n                     <div className=\"mr-4 col-9 inputDisplay border\">\r\n                           <span className=\"text-dark  h6\">Given Input:</span>\r\n                           <br></br>\r\n                           {\r\n                               currentSubQuestion &&  currentSubQuestion[\"parameters\"] && currentSubQuestion[\"parameters\"].map((key,ind)=>      \r\n                               <div className=\"mt-4\">\r\n                               <span className=\"text-primary h5 font-weight-bold\">{this.getName(key)}</span><br></br>\r\n                               <div className=\"h5 m-1\">\r\n                                           {\r\n                                               qNo===5?\r\n                                               <span>{\"[\"+ formdata[key].split(' ').join(',') +\"]\"}</span>\r\n                                               :\r\n                                               <span>{formdata[key]}</span>\r\n                                           }\r\n                                </div>\r\n                             </div>\r\n                               )\r\n                           }\r\n                    </div>\r\n                        <div className=\"mt-5\">\r\n                            <div >\r\n                                <Input type=\"select\" name=\"backend\" id=\"backend\" onChange={e=>this.handleBackendChange(e)}>\r\n                                    {backendList && backendList.map((item,ind)=>\r\n                                            <option key={ind}>{item}</option>\r\n                                    )}         \r\n                                </Input>\r\n                            </div><br></br>\r\n                            <div>\r\n                                    <button className=\"btn-primary btn-lg ml-2\" onClick={e=>this.handleSubmit(e)}>\r\n                                    Submit\r\n                                    </button>\r\n                            </div>\r\n                        </div>\r\n                     </div>\r\n                   </div>\r\n                   <div className=\"border col m-2 output-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                        <span className=\"font-weight-bold text-primary h4\">Output</span>\r\n                        <hr></hr>\r\n\r\n                        <div className=\"output-pane\">\r\n                        {\r\n                            result_collection && result_collection.map((key,ind)=>\r\n                                <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h6 class=\"card-title row font-weight-bold text-info h6\">\r\n                                        <div className=\"col-10\">{(result_collection.length - ind) +')'+key['title']}<span className=\"text-success\">{' ('+key['language']+')'}</span></div>\r\n                                        <div className=\"col-2\">{key['time']}</div>\r\n                                        </h6>\r\n                                    <div class=\"card-text\"> \r\n                                    <span className=\"font-weight-bold\">Input</span> \r\n                                    <ul className=\"bl-list\"> \r\n                                    {\r\n                                        key['params'].map((que,ind)=>\r\n                                        <li key={ind}><span className=\"font-weight-bold\">{this.getName(parametersList[key['question']][ind]) +' : '}</span>\r\n                                      \r\n                                            {\r\n                                                    que\r\n                                            }\r\n                                        \r\n                                        </li>\r\n                                        )\r\n                                    }\r\n                                    </ul>\r\n                                    <hr></hr>\r\n                                    <span className=\"font-weight-bold\">Result</span> <br></br>\r\n\r\n                                    {\r\n                                    !_.isEmpty(key['result']) ?\r\n                                    <div className=\"row\">\r\n                                        <table className=\"table table-sm col-6 table-success  table-round\"> \r\n                                        {\r\n                                            Object.keys(key['result']).map((ans,ind)=>\r\n                                            <tr key={ind}>                                                \r\n                                                   <td className=\"font-weight-bold\">{ans}</td>\r\n                                                   <td>{key['result'][ans]}</td>\r\n                                            </tr>\r\n                                            )\r\n                                        }\r\n                                        </table>\r\n                                    </div>:\r\n                                           <span className=\"font-weight-bold h5 text-danger\">{key['error']}</span> \r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            )\r\n                        }\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        distributer: (data,question,backend) => { return dispatch(questionaction.distributer(data,question,backend)); },\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","C:\\Users\\Admin\\Desktop\\WebService\\src\\layouts\\index.js",["169"],"import React, { Component } from 'react';\r\nimport Header from \"./header\";\r\nimport Sidemenu from \"./sidemenu\";\r\nclass index extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <Header {...this.props} />\r\n            \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default index;","C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\store.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\actions\\questions.action.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\layouts\\header.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\layouts\\sidemenu.js",["170"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as types from \"../store/actions/types\";\r\n\r\n class sidemenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showSideBar:\"\",\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        let loggeduser=JSON.parse(sessionStorage.getItem('loggeduser'))\r\n        if(loggeduser && loggeduser.profile_type!==\"3\"){\r\n            this.setState({showSideBar:true})\r\n        }else{\r\n            this.setState({showSideBar:false})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {showSideBar}={...this.state}\r\n        return (\r\n            <div className=\"side-menu \">\r\n                {/* <div className=\"logo-placeholder p-1\">\r\n                <span className=\"logo ml-n1 c-pointer\"  onClick={e => {showSideBar && this.props.history.push(\"/userDetails\")}}>\r\n                            <img  src={logo} alt=\"Reas-Logo\"  className=\"ReasLogo\"/>\r\n                        </span>\r\n                        \r\n                </div>\r\n                {showSideBar &&\r\n                <>\r\n                <div className='menu-icon '> <i className=\"fas fa-angle-right fa-lg \"></i></div>\r\n                <div className=\"sidemenu-body \">\r\n                    <div className=\"mb-2 mt-2 \"\r\n                     onClick={e => { this.props.history.push(\"/userDetails\")}}\r\n                    >\r\n                        < i className = \"fas fa-users \" ></i>\r\n                        <span className=\"ml-3\">User Details</span>\r\n                </div>\r\n                <div className=\"mb-2 mt-4  \" \r\n                onClick={e => { this.props.history.push(\"/AllAssessments\")}}\r\n                >\r\n                        < i className = \"fas fa-list\" ></i>\r\n                        <span className=\"ml-3\"> Assessments</span>\r\n                </div>\r\n            </div>\r\n                </>} */}\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        Header: (title) => { return dispatch({ type: types.PAGE_TITLE, payload: title }) },\r\n\r\n    };\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(sidemenu));","C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\reducers\\index.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\actions\\types.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\config.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\store\\reducers\\assessment.reducer.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\Authentication\\Login.js",["171","172","173","174","175","176"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\musicPlayer.js",["177","178","179","180","181","182","183","184","185"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\notePad.js",["186","187","188","189","190","191","192","193","194"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\dashBoard.js",["195","196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\imageConponent.js",["210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../assets/css/login.css\"\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    CardTitle,\r\n   Input\r\n  } from \"reactstrap\";\r\nimport '../styles/login.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as questionaction from \"../store/actions/questions.action\";\r\nimport _, { matches, toInteger } from 'lodash';\r\nimport moment from 'moment';\r\nimport {pythonUrl} from '../config.js'\r\nimport 'react-jinke-music-player/assets/index.css'\r\nimport MusicPlayer from './musicPlayer'\r\nimport NotePad from './notePad'\r\nimport musicPlayer from './musicPlayer';\r\n\r\nclass Image extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notepad:false,\r\n            formdata:{\r\n               \"note\":\"\"\r\n            },\r\n            selectedFile:\"\",\r\n            result_data:[],\r\n            result_collection:[],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    \r\n     \r\n     \r\n    }\r\n    \r\n\r\n\r\n    setParameters(qNo){\r\n        let { formdata,all_questions } = { ...this.state }\r\n        let fd = new FormData()\r\n        let params=[]\r\n            params.map((key,id)=>{\r\n                fd.append(key,formdata[key])\r\n            })\r\n        return fd\r\n    }\r\n\r\n    toasterHandler = (type, msg) => {\r\n        toast[type](msg, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n    }\r\n\r\n      \r\n \r\n        \r\n        handleChange=(e)=>{\r\n        \r\n            let { formdata } = { ...this.state }\r\n            formdata[e.target.name] = e.target.value       \r\n            this.setState({ formdata })\r\n        }\r\n    \r\n    render() {\r\n        let {notepad}={...this.state}\r\n        let {curImage}={...this.props}\r\n        return (\r\n            <div className=\"imageComponent\">\r\n                <div className=\"col-6 uploadImage\">\r\n                        <img src={pythonUrl+'/image/'+curImage}></img>\r\n                </div>\r\n                <div className=\"col-6 imageDisplay\">\r\n\r\n                </div>\r\n       \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        distributer: (data,api) => { return dispatch(questionaction.distributer(data,api)); },\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Image));","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\galleryComponent.js",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../assets/css/login.css\"\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    CardTitle,\r\n   Input\r\n  } from \"reactstrap\";\r\nimport '../styles/login.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as questionaction from \"../store/actions/questions.action\";\r\nimport _, { matches, toInteger } from 'lodash';\r\nimport moment from 'moment';\r\nimport {pythonUrl} from '../config.js'\r\nimport 'react-jinke-music-player/assets/index.css'\r\nimport MusicPlayer from './musicPlayer'\r\nimport NotePad from './notePad'\r\nimport musicPlayer from './musicPlayer';\r\n\r\nclass Image extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            notepad:false,\r\n            formdata:{\r\n               \"note\":\"\"\r\n            },\r\n            selectedFile:\"\",\r\n            result_data:[],\r\n            result_collection:[],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n    \r\n        this.loadGallery()\r\n     \r\n    }\r\n    loadGallery=()=>{\r\n        let fd = new FormData()\r\n        this.props.distributer(fd,\"galleryList\").then(response => {\r\n            if(response.status===200){ \r\n             let data=response['data']\r\n                this.setState({galleryList:data})\r\n                console.log(data)\r\n           }else{                \r\n             this.toasterHandler(\"error\", \"Cant reach the server\")\r\n           }\r\n         }).catch((err)=>{\r\n           this.toasterHandler(\"error\", err)\r\n         })\r\n    }\r\n\r\n\r\n    setParameters(qNo){\r\n        let { formdata,all_questions } = { ...this.state }\r\n        let fd = new FormData()\r\n        let params=[]\r\n            params.map((key,id)=>{\r\n                fd.append(key,formdata[key])\r\n            })\r\n        return fd\r\n    }\r\n\r\n    toasterHandler = (type, msg) => {\r\n        toast[type](msg, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n    }\r\n\r\n      \r\n \r\n        \r\n        handleChange=(e)=>{\r\n        \r\n            let { formdata } = { ...this.state }\r\n            formdata[e.target.name] = e.target.value       \r\n            this.setState({ formdata })\r\n        }\r\n    \r\n    render() {\r\n        let {galleryList}={...this.state}\r\n        return (\r\n            <div className=\"galleryComponent\">\r\n                {galleryList && galleryList.map((img,val)=>\r\n                        <img className=\"imgSize\" src={pythonUrl+'/image/'+img} onClick={e=>this.props.handleImage(img)}></img>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        distributer: (data,api) => { return dispatch(questionaction.distributer(data,api)); },\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Image));","C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\Chat.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\MessagePanel.js",["241"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\Message.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\channelList.js",[],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\chat\\channel.js",["242","243"],"C:\\Users\\Admin\\Desktop\\WebService\\src\\views\\reminders.js",["244","245","246","247","248","249","250","251","252","253","254","255","256"],{"ruleId":"257","replacedBy":"258"},{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","severity":1,"message":"262","line":3,"column":17,"nodeType":"263","messageId":"264","endLine":3,"endColumn":26},{"ruleId":"261","severity":1,"message":"265","line":9,"column":8,"nodeType":"263","messageId":"264","endLine":9,"endColumn":14},{"ruleId":"261","severity":1,"message":"266","line":14,"column":10,"nodeType":"263","messageId":"264","endLine":14,"endColumn":14},{"ruleId":"261","severity":1,"message":"267","line":12,"column":13,"nodeType":"263","messageId":"264","endLine":12,"endColumn":20},{"ruleId":"261","severity":1,"message":"268","line":165,"column":15,"nodeType":"263","messageId":"264","endLine":165,"endColumn":23},{"ruleId":"269","severity":1,"message":"270","line":182,"column":39,"nodeType":"271","messageId":"272","endLine":182,"endColumn":41},{"ruleId":"269","severity":1,"message":"270","line":219,"column":32,"nodeType":"271","messageId":"272","endLine":219,"endColumn":34},{"ruleId":"261","severity":1,"message":"273","line":276,"column":13,"nodeType":"263","messageId":"264","endLine":276,"endColumn":17},{"ruleId":"274","severity":1,"message":"275","line":298,"column":19,"nodeType":"276","messageId":"277","endLine":298,"endColumn":21},{"ruleId":"274","severity":1,"message":"275","line":298,"column":32,"nodeType":"276","messageId":"277","endLine":298,"endColumn":34},{"ruleId":"274","severity":1,"message":"275","line":298,"column":44,"nodeType":"276","messageId":"277","endLine":298,"endColumn":46},{"ruleId":"274","severity":1,"message":"275","line":298,"column":58,"nodeType":"276","messageId":"277","endLine":298,"endColumn":60},{"ruleId":"274","severity":1,"message":"275","line":298,"column":72,"nodeType":"276","messageId":"277","endLine":298,"endColumn":74},{"ruleId":"269","severity":1,"message":"270","line":306,"column":26,"nodeType":"271","messageId":"272","endLine":306,"endColumn":28},{"ruleId":"274","severity":1,"message":"275","line":307,"column":19,"nodeType":"276","messageId":"277","endLine":307,"endColumn":21},{"ruleId":"274","severity":1,"message":"278","line":318,"column":19,"nodeType":"276","messageId":"277","endLine":318,"endColumn":21},{"ruleId":"269","severity":1,"message":"270","line":329,"column":40,"nodeType":"271","messageId":"272","endLine":329,"endColumn":42},{"ruleId":"274","severity":1,"message":"278","line":555,"column":68,"nodeType":"276","messageId":"277","endLine":555,"endColumn":70},{"ruleId":"274","severity":1,"message":"278","line":558,"column":68,"nodeType":"276","messageId":"277","endLine":558,"endColumn":70},{"ruleId":"274","severity":1,"message":"278","line":562,"column":69,"nodeType":"276","messageId":"277","endLine":562,"endColumn":71},{"ruleId":"274","severity":1,"message":"278","line":562,"column":92,"nodeType":"276","messageId":"277","endLine":562,"endColumn":94},{"ruleId":"274","severity":1,"message":"278","line":562,"column":114,"nodeType":"276","messageId":"277","endLine":562,"endColumn":116},{"ruleId":"279","severity":1,"message":"280","line":564,"column":61,"nodeType":"281","endLine":564,"endColumn":121},{"ruleId":"257","replacedBy":"282"},{"ruleId":"259","replacedBy":"283"},{"ruleId":"261","severity":1,"message":"267","line":12,"column":13,"nodeType":"263","messageId":"264","endLine":12,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":12,"column":22,"nodeType":"263","messageId":"264","endLine":12,"endColumn":31},{"ruleId":"261","severity":1,"message":"268","line":83,"column":15,"nodeType":"263","messageId":"264","endLine":83,"endColumn":23},{"ruleId":"269","severity":1,"message":"270","line":102,"column":39,"nodeType":"271","messageId":"272","endLine":102,"endColumn":41},{"ruleId":"269","severity":1,"message":"270","line":135,"column":32,"nodeType":"271","messageId":"272","endLine":135,"endColumn":34},{"ruleId":"261","severity":1,"message":"268","line":192,"column":14,"nodeType":"263","messageId":"264","endLine":192,"endColumn":22},{"ruleId":"261","severity":1,"message":"285","line":192,"column":24,"nodeType":"263","messageId":"264","endLine":192,"endColumn":27},{"ruleId":"261","severity":1,"message":"273","line":193,"column":13,"nodeType":"263","messageId":"264","endLine":193,"endColumn":17},{"ruleId":"286","severity":1,"message":"287","line":198,"column":9,"nodeType":"288","messageId":"289","endLine":201,"endColumn":11},{"ruleId":"257","replacedBy":"290"},{"ruleId":"259","replacedBy":"291"},{"ruleId":"261","severity":1,"message":"267","line":12,"column":13,"nodeType":"263","messageId":"264","endLine":12,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":12,"column":22,"nodeType":"263","messageId":"264","endLine":12,"endColumn":31},{"ruleId":"261","severity":1,"message":"268","line":173,"column":15,"nodeType":"263","messageId":"264","endLine":173,"endColumn":23},{"ruleId":"269","severity":1,"message":"270","line":190,"column":39,"nodeType":"271","messageId":"272","endLine":190,"endColumn":41},{"ruleId":"269","severity":1,"message":"270","line":223,"column":28,"nodeType":"271","messageId":"272","endLine":223,"endColumn":30},{"ruleId":"292","severity":1,"message":"293","line":246,"column":34,"nodeType":"263","messageId":"294","endLine":246,"endColumn":52},{"ruleId":"261","severity":1,"message":"268","line":286,"column":14,"nodeType":"263","messageId":"264","endLine":286,"endColumn":22},{"ruleId":"261","severity":1,"message":"285","line":286,"column":24,"nodeType":"263","messageId":"264","endLine":286,"endColumn":27},{"ruleId":"261","severity":1,"message":"273","line":287,"column":13,"nodeType":"263","messageId":"264","endLine":287,"endColumn":17},{"ruleId":"286","severity":1,"message":"287","line":292,"column":9,"nodeType":"288","messageId":"289","endLine":295,"endColumn":11},{"ruleId":"269","severity":1,"message":"270","line":311,"column":51,"nodeType":"271","messageId":"272","endLine":311,"endColumn":53},{"ruleId":"261","severity":1,"message":"295","line":3,"column":8,"nodeType":"263","messageId":"264","endLine":3,"endColumn":16},{"ruleId":"261","severity":1,"message":"296","line":23,"column":14,"nodeType":"263","messageId":"264","endLine":23,"endColumn":25},{"ruleId":"261","severity":1,"message":"297","line":9,"column":8,"nodeType":"263","messageId":"264","endLine":9,"endColumn":9},{"ruleId":"261","severity":1,"message":"267","line":9,"column":13,"nodeType":"263","messageId":"264","endLine":9,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":9,"column":22,"nodeType":"263","messageId":"264","endLine":9,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":10,"column":8,"nodeType":"263","messageId":"264","endLine":10,"endColumn":14},{"ruleId":"261","severity":1,"message":"268","line":28,"column":15,"nodeType":"263","messageId":"264","endLine":28,"endColumn":23},{"ruleId":"269","severity":1,"message":"270","line":62,"column":32,"nodeType":"271","messageId":"272","endLine":62,"endColumn":34},{"ruleId":"261","severity":1,"message":"299","line":7,"column":4,"nodeType":"263","messageId":"264","endLine":7,"endColumn":9},{"ruleId":"261","severity":1,"message":"267","line":12,"column":13,"nodeType":"263","messageId":"264","endLine":12,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":12,"column":22,"nodeType":"263","messageId":"264","endLine":12,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":13,"column":8,"nodeType":"263","messageId":"264","endLine":13,"endColumn":14},{"ruleId":"261","severity":1,"message":"300","line":53,"column":24,"nodeType":"263","messageId":"264","endLine":53,"endColumn":37},{"ruleId":"269","severity":1,"message":"270","line":56,"column":32,"nodeType":"271","messageId":"272","endLine":56,"endColumn":34},{"ruleId":"261","severity":1,"message":"301","line":79,"column":19,"nodeType":"263","messageId":"264","endLine":79,"endColumn":23},{"ruleId":"261","severity":1,"message":"302","line":92,"column":18,"nodeType":"263","messageId":"264","endLine":92,"endColumn":32},{"ruleId":"261","severity":1,"message":"303","line":92,"column":48,"nodeType":"263","messageId":"264","endLine":92,"endColumn":55},{"ruleId":"261","severity":1,"message":"304","line":9,"column":5,"nodeType":"263","messageId":"264","endLine":9,"endColumn":15},{"ruleId":"261","severity":1,"message":"297","line":16,"column":8,"nodeType":"263","messageId":"264","endLine":16,"endColumn":9},{"ruleId":"261","severity":1,"message":"267","line":16,"column":13,"nodeType":"263","messageId":"264","endLine":16,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":16,"column":22,"nodeType":"263","messageId":"264","endLine":16,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":17,"column":8,"nodeType":"263","messageId":"264","endLine":17,"endColumn":14},{"ruleId":"261","severity":1,"message":"305","line":18,"column":9,"nodeType":"263","messageId":"264","endLine":18,"endColumn":18},{"ruleId":"261","severity":1,"message":"300","line":56,"column":24,"nodeType":"263","messageId":"264","endLine":56,"endColumn":37},{"ruleId":"269","severity":1,"message":"270","line":59,"column":32,"nodeType":"271","messageId":"272","endLine":59,"endColumn":34},{"ruleId":"306","severity":1,"message":"307","line":73,"column":17,"nodeType":"308","messageId":"277","endLine":73,"endColumn":21},{"ruleId":"261","severity":1,"message":"309","line":7,"column":5,"nodeType":"263","messageId":"264","endLine":7,"endColumn":9},{"ruleId":"261","severity":1,"message":"310","line":8,"column":5,"nodeType":"263","messageId":"264","endLine":8,"endColumn":13},{"ruleId":"261","severity":1,"message":"304","line":9,"column":5,"nodeType":"263","messageId":"264","endLine":9,"endColumn":15},{"ruleId":"261","severity":1,"message":"311","line":10,"column":5,"nodeType":"263","messageId":"264","endLine":10,"endColumn":14},{"ruleId":"261","severity":1,"message":"299","line":11,"column":4,"nodeType":"263","messageId":"264","endLine":11,"endColumn":9},{"ruleId":"261","severity":1,"message":"297","line":16,"column":8,"nodeType":"263","messageId":"264","endLine":16,"endColumn":9},{"ruleId":"261","severity":1,"message":"267","line":16,"column":13,"nodeType":"263","messageId":"264","endLine":16,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":16,"column":22,"nodeType":"263","messageId":"264","endLine":16,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":17,"column":8,"nodeType":"263","messageId":"264","endLine":17,"endColumn":14},{"ruleId":"261","severity":1,"message":"305","line":18,"column":9,"nodeType":"263","messageId":"264","endLine":18,"endColumn":18},{"ruleId":"312","severity":1,"message":"313","line":42,"column":63,"nodeType":"314","messageId":"315","endLine":42,"endColumn":65},{"ruleId":"312","severity":1,"message":"313","line":42,"column":105,"nodeType":"314","messageId":"315","endLine":42,"endColumn":107},{"ruleId":"261","severity":1,"message":"300","line":49,"column":24,"nodeType":"263","messageId":"264","endLine":49,"endColumn":37},{"ruleId":"269","severity":1,"message":"270","line":52,"column":32,"nodeType":"271","messageId":"272","endLine":52,"endColumn":34},{"ruleId":"261","severity":1,"message":"316","line":79,"column":14,"nodeType":"263","messageId":"264","endLine":79,"endColumn":22},{"ruleId":"261","severity":1,"message":"309","line":7,"column":5,"nodeType":"263","messageId":"264","endLine":7,"endColumn":9},{"ruleId":"261","severity":1,"message":"310","line":8,"column":5,"nodeType":"263","messageId":"264","endLine":8,"endColumn":13},{"ruleId":"261","severity":1,"message":"304","line":9,"column":5,"nodeType":"263","messageId":"264","endLine":9,"endColumn":15},{"ruleId":"261","severity":1,"message":"311","line":10,"column":5,"nodeType":"263","messageId":"264","endLine":10,"endColumn":14},{"ruleId":"261","severity":1,"message":"299","line":11,"column":4,"nodeType":"263","messageId":"264","endLine":11,"endColumn":9},{"ruleId":"261","severity":1,"message":"297","line":16,"column":8,"nodeType":"263","messageId":"264","endLine":16,"endColumn":9},{"ruleId":"261","severity":1,"message":"267","line":16,"column":13,"nodeType":"263","messageId":"264","endLine":16,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":16,"column":22,"nodeType":"263","messageId":"264","endLine":16,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":17,"column":8,"nodeType":"263","messageId":"264","endLine":17,"endColumn":14},{"ruleId":"261","severity":1,"message":"317","line":20,"column":8,"nodeType":"263","messageId":"264","endLine":20,"endColumn":19},{"ruleId":"261","severity":1,"message":"318","line":21,"column":8,"nodeType":"263","messageId":"264","endLine":21,"endColumn":15},{"ruleId":"261","severity":1,"message":"319","line":22,"column":8,"nodeType":"263","messageId":"264","endLine":22,"endColumn":19},{"ruleId":"261","severity":1,"message":"300","line":46,"column":24,"nodeType":"263","messageId":"264","endLine":46,"endColumn":37},{"ruleId":"269","severity":1,"message":"270","line":49,"column":32,"nodeType":"271","messageId":"272","endLine":49,"endColumn":34},{"ruleId":"261","severity":1,"message":"320","line":72,"column":14,"nodeType":"263","messageId":"264","endLine":72,"endColumn":21},{"ruleId":"279","severity":1,"message":"280","line":77,"column":25,"nodeType":"281","endLine":77,"endColumn":65},{"ruleId":"261","severity":1,"message":"309","line":7,"column":5,"nodeType":"263","messageId":"264","endLine":7,"endColumn":9},{"ruleId":"261","severity":1,"message":"310","line":8,"column":5,"nodeType":"263","messageId":"264","endLine":8,"endColumn":13},{"ruleId":"261","severity":1,"message":"304","line":9,"column":5,"nodeType":"263","messageId":"264","endLine":9,"endColumn":15},{"ruleId":"261","severity":1,"message":"311","line":10,"column":5,"nodeType":"263","messageId":"264","endLine":10,"endColumn":14},{"ruleId":"261","severity":1,"message":"299","line":11,"column":4,"nodeType":"263","messageId":"264","endLine":11,"endColumn":9},{"ruleId":"261","severity":1,"message":"297","line":16,"column":8,"nodeType":"263","messageId":"264","endLine":16,"endColumn":9},{"ruleId":"261","severity":1,"message":"267","line":16,"column":13,"nodeType":"263","messageId":"264","endLine":16,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":16,"column":22,"nodeType":"263","messageId":"264","endLine":16,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":17,"column":8,"nodeType":"263","messageId":"264","endLine":17,"endColumn":14},{"ruleId":"261","severity":1,"message":"317","line":20,"column":8,"nodeType":"263","messageId":"264","endLine":20,"endColumn":19},{"ruleId":"261","severity":1,"message":"318","line":21,"column":8,"nodeType":"263","messageId":"264","endLine":21,"endColumn":15},{"ruleId":"261","severity":1,"message":"319","line":22,"column":8,"nodeType":"263","messageId":"264","endLine":22,"endColumn":19},{"ruleId":"261","severity":1,"message":"300","line":59,"column":24,"nodeType":"263","messageId":"264","endLine":59,"endColumn":37},{"ruleId":"269","severity":1,"message":"270","line":62,"column":32,"nodeType":"271","messageId":"272","endLine":62,"endColumn":34},{"ruleId":"279","severity":1,"message":"280","line":89,"column":25,"nodeType":"281","endLine":89,"endColumn":121},{"ruleId":"274","severity":1,"message":"275","line":7,"column":62,"nodeType":"276","messageId":"277","endLine":7,"endColumn":64},{"ruleId":"261","severity":1,"message":"310","line":2,"column":16,"nodeType":"263","messageId":"264","endLine":2,"endColumn":24},{"ruleId":"261","severity":1,"message":"311","line":2,"column":26,"nodeType":"263","messageId":"264","endLine":2,"endColumn":35},{"ruleId":"261","severity":1,"message":"321","line":4,"column":10,"nodeType":"263","messageId":"264","endLine":4,"endColumn":16},{"ruleId":"261","severity":1,"message":"322","line":5,"column":10,"nodeType":"263","messageId":"264","endLine":5,"endColumn":25},{"ruleId":"261","severity":1,"message":"323","line":5,"column":27,"nodeType":"263","messageId":"264","endLine":5,"endColumn":34},{"ruleId":"261","severity":1,"message":"304","line":11,"column":5,"nodeType":"263","messageId":"264","endLine":11,"endColumn":15},{"ruleId":"261","severity":1,"message":"297","line":18,"column":8,"nodeType":"263","messageId":"264","endLine":18,"endColumn":9},{"ruleId":"261","severity":1,"message":"267","line":18,"column":13,"nodeType":"263","messageId":"264","endLine":18,"endColumn":20},{"ruleId":"261","severity":1,"message":"284","line":18,"column":22,"nodeType":"263","messageId":"264","endLine":18,"endColumn":31},{"ruleId":"261","severity":1,"message":"298","line":19,"column":8,"nodeType":"263","messageId":"264","endLine":19,"endColumn":14},{"ruleId":"261","severity":1,"message":"305","line":20,"column":9,"nodeType":"263","messageId":"264","endLine":20,"endColumn":18},{"ruleId":"261","severity":1,"message":"300","line":57,"column":24,"nodeType":"263","messageId":"264","endLine":57,"endColumn":37},{"ruleId":"269","severity":1,"message":"270","line":60,"column":32,"nodeType":"271","messageId":"272","endLine":60,"endColumn":34},{"ruleId":"306","severity":1,"message":"307","line":74,"column":17,"nodeType":"308","messageId":"277","endLine":74,"endColumn":21},{"ruleId":"261","severity":1,"message":"324","line":123,"column":40,"nodeType":"263","messageId":"264","endLine":123,"endColumn":46},"no-native-reassign",["325"],"no-negated-in-lhs",["326"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Layout' is defined but never used.","'Chat' is defined but never used.","'matches' is defined but never used.","'formdata' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'flag' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["325"],["326"],"'toInteger' is defined but never used.","'qNo' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode",["325"],["326"],"no-self-assign","'currentSubQuestion' is assigned to itself.","selfAssignment","'Sidemenu' is defined but never used.","'showSideBar' is assigned a value but never used.","'_' is defined but never used.","'moment' is defined but never used.","'Input' is defined but never used.","'all_questions' is assigned a value but never used.","'data' is assigned a value but never used.","'currentSongSrc' is assigned a value but never used.","'playing' is assigned a value but never used.","'CardFooter' is defined but never used.","'pythonUrl' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'Card' is defined but never used.","'CardBody' is defined but never used.","'CardTitle' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'curImage' is assigned a value but never used.","'MusicPlayer' is defined but never used.","'NotePad' is defined but never used.","'musicPlayer' is defined but never used.","'notepad' is assigned a value but never used.","'Button' is defined but never used.","'ReactMultiEmail' is defined but never used.","'isEmail' is defined but never used.","'emails' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]