[{"C:\\Users\\USER\\Desktop\\webservice\\src\\index.js":"1","C:\\Users\\USER\\Desktop\\webservice\\src\\App.js":"2","C:\\Users\\USER\\Desktop\\webservice\\src\\reportWebVitals.js":"3","C:\\Users\\USER\\Desktop\\webservice\\src\\store\\store.js":"4","C:\\Users\\USER\\Desktop\\webservice\\src\\store\\reducers\\index.js":"5","C:\\Users\\USER\\Desktop\\webservice\\src\\store\\actions\\types.js":"6","C:\\Users\\USER\\Desktop\\webservice\\src\\layouts\\index.js":"7","C:\\Users\\USER\\Desktop\\webservice\\src\\layouts\\header.js":"8","C:\\Users\\USER\\Desktop\\webservice\\src\\layouts\\sidemenu.js":"9","C:\\Users\\USER\\Desktop\\webservice\\src\\config.js":"10","C:\\Users\\USER\\Desktop\\webservice\\src\\store\\actions\\questions.action.js":"11","C:\\Users\\USER\\Desktop\\webservice\\src\\store\\reducers\\assessment.reducer.js":"12","C:\\Users\\USER\\Desktop\\webservice\\src\\views\\excercise1.js":"13","C:\\Users\\USER\\Desktop\\webservice\\src\\views\\excercise2.js":"14"},{"size":501,"mtime":1610429939264,"results":"15","hashOfConfig":"16"},{"size":1386,"mtime":1611665189373,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":199,"mtime":1610429541508,"results":"19","hashOfConfig":"16"},{"size":174,"mtime":1610431620346,"results":"20","hashOfConfig":"16"},{"size":392,"mtime":1602488676607,"results":"21","hashOfConfig":"16"},{"size":324,"mtime":1610430364893,"results":"22","hashOfConfig":"16"},{"size":1177,"mtime":1610432590780,"results":"23","hashOfConfig":"16"},{"size":2351,"mtime":1603270510359,"results":"24","hashOfConfig":"16"},{"size":241,"mtime":1610703869376,"results":"25","hashOfConfig":"16"},{"size":2010,"mtime":1611771393730,"results":"26","hashOfConfig":"16"},{"size":426,"mtime":1610431775452,"results":"27","hashOfConfig":"16"},{"size":24743,"mtime":1611636359350,"results":"28","hashOfConfig":"16"},{"size":22698,"mtime":1611799969746,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"18nctnd",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\USER\\Desktop\\webservice\\src\\index.js",[],["62","63"],"C:\\Users\\USER\\Desktop\\webservice\\src\\App.js",["64"],"\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { createBrowserHistory } from 'history';\nimport store from './store/store';\nimport Layout from './layouts/index';\n\nimport Ex1 from './views/excercise1.js';\nimport Ex2 from './views/excercise2.js';\n\nconst history = createBrowserHistory();\n\nfunction App() {\n  return (\n    <Provider store={store}>\n        <Router history={history} exact path=\"/\">\n          <main className=\"h-100\">\n            <Switch>\n              <Route exact={true} path=\"/Ex1\" render={() => (\n                <>\n                  <Layout page={\"Service Oriented Architecture & WebServices\"}/>\n                    <div className=\"main\" >\n                      <Ex1 />\n                    </div>\n                </>\n              )}\n              />\n              <Route exact={true} path=\"/\" render={() => (\n                <>\n                  <Layout page={\"Service Oriented Architecture & WebServices\"}/>\n                    <div className=\"main\" >\n                      <Ex2 />\n                    </div>\n                </>\n              )}\n              />\n\n            </Switch>\n            <ToastContainer />\n          </main>\n        </Router>\n      </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\USER\\Desktop\\webservice\\src\\reportWebVitals.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\store\\store.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\store\\reducers\\index.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\store\\actions\\types.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\layouts\\index.js",["65"],"import React, { Component } from 'react';\r\nimport Header from \"./header\";\r\nimport Sidemenu from \"./sidemenu\";\r\nclass index extends Component {\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <Header {...this.props} />\r\n            \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default index;","C:\\Users\\USER\\Desktop\\webservice\\src\\layouts\\header.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\layouts\\sidemenu.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\config.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\store\\actions\\questions.action.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\store\\reducers\\assessment.reducer.js",[],"C:\\Users\\USER\\Desktop\\webservice\\src\\views\\excercise1.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport \"../assets/css/login.css\"\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport {\r\n   Input\r\n  } from \"reactstrap\";\r\nimport '../styles/login.css'\r\nimport { withRouter } from 'react-router-dom';\r\nimport * as questionaction from \"../store/actions/questions.action\";\r\nimport _, { matches, toInteger } from 'lodash';\r\nimport moment from 'moment';\r\n\r\nlet questionList={\r\n    \"1\":{\r\n        \"question\":\"Calculate the difference between two dates\",\r\n        \"parameters\":[\"day\",\"month\",\"year\",\"hour\",\"minute\",\"second\"],\r\n        \"description\":\"To calculate the actual diffence between two give Dates.\",\r\n        \"type\":[\"datetime-local\",\"datetime-local\"],\r\n        \"no_of_inputs\":2,\r\n        \"date\":true,\r\n        \"title\":[\"Date 1\",\"Date 2\"],\r\n        \"result\":[\"Number of Days\",\"Number of Months\",\"Number of Years\",\"Number of Hours\",\"Number of Minutes\",\"Number of Seconds\"]\r\n\r\n        },\r\n    \"2\":{\r\n        \"question\":\"Perform Set theory operations such as Union, Minus, Intersection for the group of data\",\r\n        \"parameters\":[\"set_a\",\"set_b\"],\r\n        \"description\":\"To perform set theory operations on give 2 sets.\",\r\n        \"type\":[\"text\",\"text\"],\r\n        \"no_of_inputs\":2,\r\n        \"title\":[\"Set 1\",\"Set 2\"],\r\n        \"result\":[\"Union\",\"Intersection\",\"Minus(A-B)\",\"Minus(B-A)\"]\r\n        },\r\n    \"3\":{\r\n        \"question\":\"Perform matrix operations like Transpose, Lower Diagonal (Left & Right), Upper Diagonal (Left & Right) and Swivel\",\r\n        \"parameters\":[\"order\",\"matrix_a\"],\r\n        \"description\":\"To matrix operations like Transpose, Lower Diagonal (Left & Right), Upper Diagonal (Left & Right) and Swivel on give matrix\",\r\n        \"type\":[\"number\",\"text\"],\r\n        \"no_of_inputs\":2,\r\n        \"title\":[\"Order\",\"Matrix\"],\r\n        \"result\":[\"Transpose\",\"Left Lower Diagonal\",\"Right Lower Diagonal\",\"Left Upper Diagonal\",\"Rigth Upper Diagonal\",\"Swivel Matrix\"]\r\n\r\n        },\r\n    \"4\":{\r\n        \"question\":\"Convert the figure into words in currency\",\r\n        \"parameters\":[\"currency\"],\r\n        \"description\":\"To Convert the figure into words in currency\",\r\n        \"type\":[\"number\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Currency\"],\r\n        \"result\":[\"Currency\"]\r\n        \r\n        },\r\n    \"5\":{\r\n        \"question\":\"Implement the RSA algorithm for encryption and decryption\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"To Implement the RSA algorithm for encryption and decryption\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"RSA ALgorithm\"],\r\n        \"result\":[\"Encrpted Message\",\"Original Message\"]\r\n    },\r\n    \"6\":{\r\n        \"question\":\"Generate the checksum value for the given sentence using md5 algorithm\",\r\n        \"parameters\":[\"Sentence\"],\r\n        \"description\":\"Description\",\r\n    },\r\n    \"7\":{\r\n        \"question\":\"Generate 128-bit bar code for alphanumeric data\",\r\n        \"parameters\":[\"Alphanumeric\"],\r\n        \"description\":\"Description\",\r\n    },\r\n    \"8\":{\r\n        \"question\":\"Generate QR code for alphanumeric data\",\r\n        \"parameters\":[\"Alphanumeric\"],\r\n        \"description\":\"Description\",\r\n    },\r\n    \"9\":{\r\n        \"question\":\"Generate a one-time password (OTP) in numbers, alphabet and alphanumeric\",\r\n        \"parameters\":[\"otpLength\"],\r\n        \"description\":\"To Generate a one-time password (OTP) in numbers, alphabet and alphanumeric\",\r\n        \"type\":[\"number\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"OTP Generation\"],\r\n        \"result\":[\"OTP\"]\r\n    },\r\n    \"10\":{\r\n        \"question\":\"Generate a Completely Automated Public Turing test to tell Computers and Humans Apart (CAPTCHA) for the given string\",\r\n        \"parameters\":[\"message\"],\r\n        \"description\":\"To Generate a Completely Automated Public Turing test to tell Computers and Humans Apart (CAPTCHA) for the given string\",\r\n        \"type\":[\"text\"],\r\n        \"no_of_inputs\":1,\r\n        \"title\":[\"Captcha Generation\"],\r\n        \"result\":[\"Captcha\"]\r\n    },\r\n}\r\nlet parametersList={\r\n    \"1\":[\"date_1\",\"date_2\"],\r\n    \"2\":[\"set_a\",\"set_b\"],\r\n    \"3\":[\"order\",\"matrix_a\"],\r\n    \"4\":[\"currency\"],\r\n    \"5\":[\"message\"],\r\n    \"9\":[\"otpLength\"],\r\n    \"10\":[\"message\"],\r\n}\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            qNo:1,\r\n            currentQuestion:{},\r\n            backendList:[\"Python\",\"JavaScript\",\"PHP\"],\r\n            selectedBackend:\"Python\",\r\n            formdata:{\r\n                \"day_1\":0,\r\n                \"month_1\":0,\r\n                \"year_1\":0,\r\n                \"hour_1\":0,\r\n                \"minute_1\":0,\r\n                \"second_1\":0,         \r\n                \"day_2\":0,\r\n                \"month_2\":0,\r\n                \"year_2\":0,\r\n                \"hour_2\":0,\r\n                \"minute_2\":0,\r\n                \"second_2\":0,\r\n                \"set_a\":\"\",\r\n                \"set_b\":\"\",\r\n                \"order\":0,\r\n                \"matrix\":\"\",\r\n                \"currency_amount\":0,\r\n                \"message\":\"\",\r\n            },\r\n            validateMsg:\"\",\r\n            result_data:[],\r\n            result_collection:[],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.questionLoader(this.state.qNo)\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let { formdata,qNo,selectedBackend } = { ...this.state }\r\n        if(this.validateState()){ \r\n\r\n        let fd = new FormData()\r\n        fd=this.setParameters(qNo)\r\n        this.props.distributer(fd,qNo,selectedBackend).then(response => {\r\n            console.log(\"her\",response,response['data'].status)\r\n            if(response['data'].status===200){\r\n              let data=response['data']    \r\n              let question = data['question']\r\n              let result= data['result']              \r\n              let params = questionList[question]['result']\r\n              let output={}\r\n              let error=\"\"\r\n                if(data['error']){\r\n                    error=data['error']\r\n                }else{\r\n                  params.map((key,ind)=>{\r\n                        output[key]=result[ind]\r\n                  })\r\n                }\r\n\r\n              let obj={\r\n                  question:question,\r\n                  result:output,\r\n                  language:data['language'],\r\n                  title:data['title'],\r\n                  params:data['params'],\r\n                  time:moment().format('LT'),\r\n                  error:error,\r\n              }\r\n              let {result_data}={...this.state}\r\n              result_data.push(obj)\r\n              console.log(obj)\r\n              this.setState({result_data})\r\n              this.questionLoader(qNo)\r\n            }else{\r\n                \r\n              this.toasterHandler(\"error\", \"Cant reach the server\")\r\n            }\r\n          }).catch((err)=>{\r\n            this.toasterHandler(\"error\", \"Cant reach the server\")\r\n          })\r\n        }\r\n    }\r\n\r\n    setParameters(qNo){\r\n        let { formdata } = { ...this.state }\r\n        let fd = new FormData()\r\n        let params=parametersList[qNo]\r\n        if(qNo===1){\r\n            fd.append(\"date_1\",formdata['day_1']+\"/\"+formdata['month_1']+\"/\"+formdata['year_1']+\"/\"+formdata['hour_1']+\"/\"+formdata['minute_1']+\"/\"+formdata['second_1']+\"/\")\r\n            fd.append(\"date_2\",formdata['day_2']+\"/\"+formdata['month_2']+\"/\"+formdata['year_2']+\"/\"+formdata['hour_2']+\"/\"+formdata['minute_2']+\"/\"+formdata['second_2']+\"/\")\r\n        }else{\r\n            params.map((key,id)=>{\r\n                fd.append(key,formdata[key])\r\n            })\r\n        }\r\n        return fd\r\n    }\r\n  \r\n    handleBackendChange=(e)=>{\r\n        this.setState({selectedBackend:e.target.value})\r\n    }\r\n    toasterHandler = (type, msg) => {\r\n        toast[type](msg, {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n        });\r\n    }\r\n\r\n    questionLoader=(qNo)=>{\r\n        let { currentQuestion,result_collection,result_data } = { ...this.state }\r\n        currentQuestion=questionList[qNo]\r\n        result_collection=_.reverse(_.filter(result_data,{ 'question':qNo}));\r\n        this.setState({currentQuestion,result_collection})\r\n\r\n    }\r\n\r\n    handleNextQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo+1\r\n        if(qNo>Object.keys(questionList).length){\r\n            qNo=1\r\n        }\r\n        this.questionLoader(qNo)\r\n        this.setState({qNo})\r\n    }\r\n\r\n    handlePreviousQuestion=()=>{\r\n        let { qNo } = { ...this.state }\r\n        qNo=qNo-1\r\n        if(qNo<1){\r\n            qNo=Object.keys(questionList).length\r\n        }\r\n        this.questionLoader(qNo)\r\n        this.setState({qNo})\r\n    }\r\n    getName=(name)=>{\r\n            name = name.replace(\"_\", \" \")\r\n            name = _.startCase(name);\r\n            return name\r\n    }\r\n    handleChange=(e)=>{\r\n        \r\n        let { formdata } = { ...this.state }\r\n        formdata[e.target.name] = e.target.value       \r\n        this.setState({ formdata })\r\n    }\r\n    validateState(){\r\n        let {formdata ,qNo,validateMsg}={...this.state}\r\n        let flag = 0\r\n        if(qNo===1){\r\n            let date1=this.dateValidation(formdata[\"day_1\"],formdata[\"month_1\"],formdata[\"year_1\"],formdata[\"hour_1\"],formdata[\"minute_1\"],formdata[\"second_1\"])\r\n            let date2=this.dateValidation(formdata[\"day_2\"],formdata[\"month_2\"],formdata[\"year_2\"],formdata[\"hour_2\"],formdata[\"minute_2\"],formdata[\"second_2\"])\r\n            if(date1 && date2){\r\n                return true\r\n            }else{\r\n                validateMsg=\"Invalid Date\"\r\n            }\r\n        }else{\r\n            return true\r\n        }\r\n        \r\n        this.setState({validateMsg},()=>{\r\n            this.toasterHandler(\"error\", validateMsg)\r\n            return false\r\n        })\r\n        \r\n    }\r\n\r\n    dateValidation(day,month,year,hour,minute,second){\r\n\r\n            if(day!=\"\" && month!=\"\" && year!=\"\" && minute!=\"\" && second!=\"\" && hour>=0 && hour<24 && minute>=0 && minute<=60 && second>=0 && second<=60 && day>=1 && day<=31 && month>=1 && month<=12 && year>=1){\r\n                return true\r\n            }\r\n            return false\r\n    }\r\n\r\n    printSet=(set)=>{\r\n        let res=\"[ \"\r\n        set.map((val,ind)=>{\r\n            if(ind!=0)\r\n                res=res+\",\"+val\r\n            else    \r\n                res=res+val\r\n        })\r\n        res=res+\" ]\"\r\n        return res\r\n    }\r\n    printMatrix=(value,ind)=>{\r\n        let {formdata}={...this.state}\r\n        if(value){\r\n            if(ind==0){\r\n                    return (value+ \" * \"+value)\r\n            }else{\r\n                let array=value.split(/\\s+/);\r\n                let order=formdata['order']\r\n                if(order>1){\r\n                    let count=0;\r\n                    let matrix=[]\r\n                    let temp=[]\r\n                    if(array.length>=(order*order))\r\n                        array.splice(order*order+1,array.length)\r\n                    array.map((val,ind)=>{\r\n                        \r\n                        if(count === (toInteger(order))){\r\n                            matrix.push(temp)\r\n                            temp=[]\r\n                            temp.push(val)\r\n                            count=1\r\n                        }else{\r\n                            temp.push(val)\r\n                            count=count+1\r\n                        }\r\n                    })\r\n                    return this.matrixGen(matrix)\r\n                }else{\r\n                    this.toasterHandler('error',\"Enter valid Order\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n    matrixGen=(matrix)=>{\r\n        return (\r\n            <div className=\"m-1\">\r\n              {matrix.map((row, i) => (\r\n                <div key={i}>\r\n                  {row.map((col, j) => (\r\n                    <span className=\"m-1\" key={j}>{col}</span>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          );\r\n    }\r\n    render() {\r\n        let {qNo,currentQuestion,backendList,formdata,result_collection}={...this.state}\r\n        return (\r\n             <div className=\"main-container\">\r\n               <div className=\"question-container shadow-lg p-3 mb-5 bg-white rounded\">\r\n                <div className=\"d-flex justify-content-between\">\r\n                            <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handlePreviousQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-left fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                                <button className=\"btn-success btn-lg ml-2 disable\">\r\n                                <span className=\"m-2\">{\"Question:    \"+ qNo }</span>\r\n                                </button>\r\n                            </div>\r\n                            <div className=\"question-text  d-flex align-items-center\">\r\n                                  <span className=\"text-info font-weight-bold\">  {currentQuestion && currentQuestion[\"question\"] && currentQuestion[\"question\"]}</span>\r\n                            </div>\r\n                        <div className=\"m-1\">\r\n                                <button className=\"btn-primary btn-lg\" onClick={e=>this.handleNextQuestion()}>\r\n                                <i className=\"fa fa-caret-square-o-right fa-lg\" aria-hidden=\"true\"></i>\r\n                                </button>\r\n                        </div>\r\n                        \r\n                </div>\r\n               </div>\r\n               <div className=\"row d-flex justify-content-between m-2\">\r\n                   <div className=\"border col-2 parameter-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                   <div class=\"card mt-2\">\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title font-weight-bold text-info\">Description</h5>\r\n                        <p class=\"card-text\">  \r\n                       {currentQuestion && currentQuestion[\"description\"] && currentQuestion[\"description\"]}\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                   <div class=\"card mt-3\">\r\n                      <div class=\"card-body\">\r\n                        <h5 class=\"card-title font-weight-bold text-info\">Parameters</h5>\r\n                        <p class=\"card-text\">  \r\n                        <ul>\r\n                            {currentQuestion && currentQuestion[\"parameters\"] && currentQuestion[\"parameters\"].map((item,ind)=>\r\n                                <li key={ind}>{this.getName(item)}</li>\r\n                            )}\r\n                        </ul>\r\n                        </p>\r\n                    </div>\r\n                    </div>\r\n                  \r\n                   </div>\r\n                   <div className=\"border col m-2 input-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                     <span className=\"font-weight-bold text-primary h4\">Input</span>\r\n                     <hr></hr>\r\n                     <div className=\"inputContainer\">\r\n                        {currentQuestion && currentQuestion[\"no_of_inputs\"] && [...Array(currentQuestion[\"no_of_inputs\"])].map((item,ind)=>\r\n                           \r\n                           currentQuestion[\"date\"]?\r\n                                <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title font-weight-bold text-danger\">{currentQuestion[\"title\"][ind]+\":\"}</h5>\r\n                                    <div class=\"card-text row\">  \r\n                                        {currentQuestion[\"parameters\"].map((key,id)=>\r\n                                            <div key={id} className=\"col m-1\">\r\n                                            <label>{this.getName(key)}</label>\r\n                                                <input  className=\"form-control\" type={\"number\"} name={key+\"_\"+(ind+1)} value={formdata[key+\"_\"+(ind+1)]} min=\"0\" onChange={e=>this.handleChange(e)}></input>\r\n                                            </div> \r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                                </div>\r\n                  \r\n                           :\r\n                           <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h5 class=\"card-title font-weight-bold text-danger\">{currentQuestion[\"title\"][ind]+\":\"}</h5>\r\n                                    <p class=\"card-text\">  \r\n                                    <input key={ind} className=\"form-control\" name={currentQuestion[\"parameters\"][ind]} value={formdata[currentQuestion[\"parameters\"][ind]]} type={currentQuestion[\"type\"][ind]} onChange={e=>this.handleChange(e)}></input>\r\n                                    </p>\r\n                                </div>\r\n                            </div>\r\n                       \r\n                         )}\r\n                     </div>\r\n                    \r\n                   \r\n                     <div className=\"m-2 row d-flex justify-content-end InputFooter \">\r\n                     <div className=\"mr-4 col-9 inputDisplay border\">\r\n                           <span className=\"text-dark  h6\">Given Input:</span>\r\n                           <br></br>\r\n                           {\r\n                               qNo===1?\r\n                               <div className=\"m-1\">\r\n                               {[...Array(2)].map((item,ind)=>\r\n                                  <div className=\"mt-4\">\r\n                                      <span className=\"text-primary h5 font-weight-bold\">{\"Date \" + (ind+1)}</span><br></br>\r\n                                      <div className=\"h5 m-1\">\r\n                                          {formdata[\"day_\"+(ind+1)]+\"/\"+formdata[\"month_\"+(ind+1)]+\"/\"+formdata[\"year_\"+(ind+1)]+\"  -  \"+formdata[\"hour_\"+(ind+1)]+\":\"+formdata[\"minute_\"+(ind+1)]+\":\"+formdata[\"second_\"+(ind+1)]}\r\n                                      </div>\r\n                                  </div>\r\n                               )}\r\n                            </div>\r\n                        :\r\n                               questionList && questionList[qNo][\"parameters\"].map((key,ind)=>      \r\n                               <div className=\"mt-4\">\r\n                               <span className=\"text-primary h5 font-weight-bold\">{this.getName(key)}</span><br></br>\r\n                               <div className=\"h5 m-1\">\r\n                                   \r\n                                   {\r\n                                    qNo===2?   \r\n                                       <span>{\"[\"+ formdata[key].split(' ').join(',') +\"]\"}</span>\r\n                                       :\r\n                                    qNo===3?\r\n                                   \r\n                                        this.printMatrix(formdata[key],ind)\r\n                                        :\r\n\r\n                                       <span>{formdata[key]}</span>\r\n                                   }\r\n                                </div>\r\n                             </div>\r\n                               )\r\n                           }\r\n                    </div>\r\n                        <div className=\"mt-5\">\r\n                            <div >\r\n                                <Input type=\"select\" name=\"backend\" id=\"backend\" onChange={e=>this.handleBackendChange(e)}>\r\n                                    {backendList && backendList.map((item,ind)=>\r\n                                            <option key={ind}>{item}</option>\r\n                                    )}         \r\n                                </Input>\r\n                            </div><br></br>\r\n                            <div>\r\n                                    <button className=\"btn-primary btn-lg ml-2\" onClick={e=>this.handleSubmit(e)}>\r\n                                    Submit\r\n                                    </button>\r\n                            </div>\r\n                        </div>\r\n                     </div>\r\n                   </div>\r\n                   <div className=\"border col m-2 output-div shadow-sm p-3 mb-5 bg-white rounded\">\r\n                        <span className=\"font-weight-bold text-primary h4\">Output</span>\r\n                        <hr></hr>\r\n\r\n                        <div className=\"output-pane\">\r\n                        {\r\n                            result_collection && result_collection.map((key,ind)=>\r\n                                <div class=\"card m-2\" key={ind}>\r\n                                <div class=\"card-body\">\r\n                                    <h6 class=\"card-title row font-weight-bold text-info h6\">\r\n                                        <div className=\"col-10\">{(result_collection.length - ind) +')'+key['title']}<span className=\"text-success\">{' ('+key['language']+')'}</span></div>\r\n                                        <div className=\"col-2\">{key['time']}</div>\r\n                                        </h6>\r\n                                    <div class=\"card-text\"> \r\n                                    <span className=\"font-weight-bold\">Input</span> \r\n                                    <ul className=\"bl-list\"> \r\n                                    {\r\n                                        key['params'].map((que,ind)=>\r\n                                        <li key={ind}><span className=\"font-weight-bold\">{this.getName(parametersList[key['question']][ind]) +' : '}</span>\r\n                                      \r\n                                            {key['question']===2?\r\n                                                    this.printSet(que)\r\n                                                :\r\n                                                    que\r\n                                            }\r\n                                        \r\n                                        </li>\r\n                                        )\r\n                                    }\r\n                                    </ul>\r\n                                    <hr></hr>\r\n                                    {\r\n                                    !_.isEmpty(key['result']) ?\r\n                                    <div>\r\n                                        <span className=\"font-weight-bold\">Result</span> \r\n                                        <ul className=\"bl-list\"> \r\n                                        {\r\n                                            Object.keys(key['result']).map((ans,ind)=>\r\n                                            <li key={ind}><span className=\"font-weight-bold\">{ans+\" : \"}</span>\r\n                                                {\r\n                                                    key['question']==2?\r\n                                                        this.printSet(key['result'][ans])\r\n                                                    :\r\n                                                    key['question']==3?\r\n                                                        this.matrixGen(key['result'][ans])\r\n                                                    :\r\n\r\n                                                     key['question']==10?\r\n                                                        <div>\r\n                                                            <img src={`data:image/jpeg;base64,${key['result'][ans]}`} />\r\n                                                        </div>\r\n                                                    :\r\n                                                    key['result'][ans]}</li>\r\n                                            )\r\n                                        }\r\n                                        </ul>\r\n                                    </div>:\r\n                                           <span className=\"font-weight-bold h5 text-danger\">{key['error']}</span> \r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            )\r\n                        }\r\n                       </div>\r\n                   </div>\r\n               </div>\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        distributer: (data,question,backend) => { return dispatch(questionaction.distributer(data,question,backend)); },\r\n    };\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","C:\\Users\\USER\\Desktop\\webservice\\src\\views\\excercise2.js",["84","85","86","87","88","89","90","91","92","93","94"],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":17,"nodeType":"101","messageId":"102","endLine":3,"endColumn":26},{"ruleId":"99","severity":1,"message":"103","line":3,"column":8,"nodeType":"101","messageId":"102","endLine":3,"endColumn":16},{"ruleId":"99","severity":1,"message":"104","line":12,"column":13,"nodeType":"101","messageId":"102","endLine":12,"endColumn":20},{"ruleId":"99","severity":1,"message":"105","line":146,"column":15,"nodeType":"101","messageId":"102","endLine":146,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":163,"column":39,"nodeType":"108","messageId":"109","endLine":163,"endColumn":41},{"ruleId":"106","severity":1,"message":"107","line":200,"column":32,"nodeType":"108","messageId":"109","endLine":200,"endColumn":34},{"ruleId":"99","severity":1,"message":"110","line":256,"column":13,"nodeType":"101","messageId":"102","endLine":256,"endColumn":17},{"ruleId":"111","severity":1,"message":"112","line":278,"column":19,"nodeType":"113","messageId":"114","endLine":278,"endColumn":21},{"ruleId":"111","severity":1,"message":"112","line":278,"column":32,"nodeType":"113","messageId":"114","endLine":278,"endColumn":34},{"ruleId":"111","severity":1,"message":"112","line":278,"column":44,"nodeType":"113","messageId":"114","endLine":278,"endColumn":46},{"ruleId":"111","severity":1,"message":"112","line":278,"column":58,"nodeType":"113","messageId":"114","endLine":278,"endColumn":60},{"ruleId":"111","severity":1,"message":"112","line":278,"column":72,"nodeType":"113","messageId":"114","endLine":278,"endColumn":74},{"ruleId":"106","severity":1,"message":"107","line":286,"column":26,"nodeType":"108","messageId":"109","endLine":286,"endColumn":28},{"ruleId":"111","severity":1,"message":"112","line":287,"column":19,"nodeType":"113","messageId":"114","endLine":287,"endColumn":21},{"ruleId":"111","severity":1,"message":"115","line":298,"column":19,"nodeType":"113","messageId":"114","endLine":298,"endColumn":21},{"ruleId":"106","severity":1,"message":"107","line":309,"column":40,"nodeType":"108","messageId":"109","endLine":309,"endColumn":42},{"ruleId":"111","severity":1,"message":"115","line":519,"column":68,"nodeType":"113","messageId":"114","endLine":519,"endColumn":70},{"ruleId":"111","severity":1,"message":"115","line":522,"column":68,"nodeType":"113","messageId":"114","endLine":522,"endColumn":70},{"ruleId":"111","severity":1,"message":"115","line":526,"column":69,"nodeType":"113","messageId":"114","endLine":526,"endColumn":71},{"ruleId":"116","severity":1,"message":"117","line":528,"column":61,"nodeType":"118","endLine":528,"endColumn":121},{"ruleId":"99","severity":1,"message":"104","line":12,"column":13,"nodeType":"101","messageId":"102","endLine":12,"endColumn":20},{"ruleId":"99","severity":1,"message":"119","line":12,"column":22,"nodeType":"101","messageId":"102","endLine":12,"endColumn":31},{"ruleId":"99","severity":1,"message":"105","line":173,"column":15,"nodeType":"101","messageId":"102","endLine":173,"endColumn":23},{"ruleId":"106","severity":1,"message":"107","line":190,"column":39,"nodeType":"108","messageId":"109","endLine":190,"endColumn":41},{"ruleId":"106","severity":1,"message":"107","line":223,"column":28,"nodeType":"108","messageId":"109","endLine":223,"endColumn":30},{"ruleId":"120","severity":1,"message":"121","line":246,"column":34,"nodeType":"101","messageId":"122","endLine":246,"endColumn":52},{"ruleId":"99","severity":1,"message":"105","line":286,"column":14,"nodeType":"101","messageId":"102","endLine":286,"endColumn":22},{"ruleId":"99","severity":1,"message":"123","line":286,"column":24,"nodeType":"101","messageId":"102","endLine":286,"endColumn":27},{"ruleId":"99","severity":1,"message":"110","line":287,"column":13,"nodeType":"101","messageId":"102","endLine":287,"endColumn":17},{"ruleId":"124","severity":1,"message":"125","line":292,"column":9,"nodeType":"126","messageId":"127","endLine":295,"endColumn":11},{"ruleId":"106","severity":1,"message":"107","line":311,"column":51,"nodeType":"108","messageId":"109","endLine":311,"endColumn":53},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Sidemenu' is defined but never used.","'matches' is defined but never used.","'formdata' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'flag' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'toInteger' is defined but never used.","no-self-assign","'currentSubQuestion' is assigned to itself.","selfAssignment","'qNo' is assigned a value but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","no-global-assign","no-unsafe-negation"]